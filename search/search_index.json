{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hejka hejka, zgubi\u0142e\u015b si\u0119?","text":""},{"location":"test/","title":"Test","text":""},{"location":"test/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"test/#to-dla-mnie-sciaga","title":"To dla mnie \u015bci\u0105ga:","text":"<p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p>deleted added</p> <p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li>:man_raising_hand: I'm an annotation!</li> <li>:woman_raising_hand: I'm an annotation as well!</li> </ol> <p>Siema</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>1</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"devops/","title":"Jenkins, AWS, EC2, CI/CD","text":""},{"location":"devops/docker/notes1/","title":"Basics","text":""},{"location":"devops/docker/notes1/#podstawowe-elementy-tworzenia-pliku","title":"Podstawowe elementy tworzenia pliku","text":"<pre><code># Wybiera obraz bazowy \nFROM openjdk:21-slim \n\n# Ustawia bi\u0119\u017c\u0105cy katalog roboczy wewn\u0105trz kontenera. Wszystkie polecenia (COPY, RUN, ...)\n# wykonywane s\u0105 w\u0142a\u015bnie w tym katalogu. \nWORKDIR /app \n\n# Ustawia zmienn\u0105 \u015brodowiskow\u0105\nENV DB_URL=...\nENV APP_NAME=hello-world\nENV SPRING_PROFILES_ACTIVE=deployment\n\n# Kopiuje plik z lokalnego kontekstu budowania do kontenera do folderu ./target\n# zmieniaj\u0105c te\u017c nazw\u0119 pliku na app2.jar \nCOPY app.jar ./target/app2.jar \n</code></pre> <pre><code>FROM maven:3.9.8-eclipse-temurin-21 \n</code></pre>"},{"location":"devops/docker/notes1/#multi-stage-build","title":"Multi-stage build","text":"<p>Multi-stage build to technika, kt\u00f3ra pozwala tworzy\u0107 obrazy w kilku etapach, co umo\u017cliwia - kompilowanie aplikacji w jednym etapie (z wszystkimi potrzebnymi narz\u0119dziami) - skopiowanie tylko gotowych plik\u00f3w binarnych/aplikacyjnych do ko\u0144cowego, lekkiego obrazu produkcyjnego </p> <pre><code># Etap 1: budowanie aplikacji\nFROM maven:3.9-eclipse-temurin-17 AS builder\nWORKDIR /app\nCOPY pom.xml .\nCOPY src ./src\nRUN mvn clean package -DskipTests\n\n# Etap 2: tylko gotowy JAR w lekkim obrazie\nFROM eclipse-temurin:17-jre AS runtime\nWORKDIR /app\n\n# Kopiujemy rezultat z poprzedniego etapu \nCOPY --from=builder /app/target/my-app.jar ./app.jar\nCMD [\"java\", \"-jar\", \"app.jar\"]\n</code></pre>"},{"location":"devops/docker/notes1/#roznice-miedzy-cmdrunentrypoint","title":"R\u00f3\u017cnice mi\u0119dzy CMD/RUN/ENTRYPOINT","text":"<p><code>https://www.docker.com/blog/docker-best-practices-choosing-between-run-cmd-and-entrypoint/</code></p>"},{"location":"devops/docker/notes1/#budowanie-i-pushowanie","title":"Budowanie i pushowanie","text":"<p>Zbudujemy obraz i dodamy go do zdalnego rejestru na DockerHub: <pre><code>docker build -t username/repo:tag backend/Dockerfile \ndocker image push docker.io/username/repo:tag \n</code></pre></p>"},{"location":"devops/docker/notes2/","title":"Docker Compose","text":"<p>Informacje do <code>docker compose</code>: <code>https://docs.docker.com/compose/how-tos/project-name/</code></p>"},{"location":"devops/docker/notes2/#podstawowe-informacje","title":"Podstawowe informacje","text":"<p>Stw\u00f3rz plik <code>docker-compose.yml</code>. Prosty przyk\u0142adowy plik wygl\u0105da nast\u0119puj\u0105co:</p> <pre><code>services:\n    backend:\n        # sami budujemy obraz \n        build: \n            context: ./backend \n            dockerfile: Dockerfile \n        container_name: backend \n        ports:\n            - \"8080:8080\"\n        environment:\n            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/backend-db\n        depends_on:\n            db:\n                condition: service_healthy \n                restart: true \n        networks:\n            - app-network \n\n    db:\n        # korzystamy z gotowego obrazu\n        image: postgres\n        healthcheck:\n            test: [\"CMD-SHELL\", \"pg_isready -U admin -d backend-db\"]\n            interval: 10s\n            retries: 5\n            start_period: 30s\n            timeout: 10s    \n\nnetworks:\n    app-network:\n        driver: bridge\n</code></pre> <p>W celu startu wykonaj: <code>docker compose up -d</code>, gdzie flaga <code>-d</code> oznacza opcj\u0119 <code>detach</code> - odpalenia w tle. </p> <p>Mo\u017cna te\u017c zatrzyma\u0107 lub ponownie wystartowa\u0107 kontenery: <pre><code>docker compose stop\ndocker compose start \n\ndocker compose down \n</code></pre></p>"},{"location":"devops/docker/notes2/#zmienne-srodowiskowe","title":"Zmienne \u015brodowiskowe","text":"<p>Docker Compose szuka pliku <code>.env</code> - eksportuje znajduj\u0105ce si\u0119 tam zmienne \u015brodowiskowe. Mo\u017cna te\u017c jawnie przekaza\u0107 scie\u017ck\u0119 do pliku: <pre><code>docker compose --env-file ./myenv up -d\n</code></pre></p> <p>Docker Compose widzi te\u017c zmienne \u015brodowiskowe ustawione z zewn\u0105trz. Przyk\u0142adowo, w Github Actions mo\u017cna u\u017cy\u0107 kluczy repozytorium:</p> <pre><code>run: |\n    export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    docker compose up -d\n</code></pre>"},{"location":"devops/docker/notes2/#ustawianie-zmiennych-srodowiskowych","title":"Ustawianie zmiennych \u015brodowiskowych","text":"<pre><code># in map form\nenvironment:\n    DEBUG: \"true\"\n\n# in list form \nenvironment:\n    - DEBUG=true \n\n# takes value from shell environment, gives warning if value is not present\nenvironment:\n    - DEBUG=${DEBUG]}\n</code></pre> <pre><code>services:\n    webapp:\n        env_file: \"webapp.env\"\n        env_file:\n            - \"webapp.env\"\n            - ...\n</code></pre> <p>Wypisanie zmiennych \u015brodowiskowych w kontenerze: <code>docker compose run &lt;service_name&gt; env</code></p>"},{"location":"devops/docker/notes2/#secrets","title":"Secrets","text":"<p>Sekrety to dane, kt\u00f3re s\u0105 dodawane do katalogu <code>/run/secrets/&lt;secret_name&gt;</code> we wn\u0119trzu kontenera. </p> <pre><code>services:\n    db:\n        secrets:\n            - db_root_password\n            - db_password\n\nsecrets:\n    db_password:\n        file: db_password.txt\n    db_root_password:\n        file: db_root_password.txt \n</code></pre> <p>Sekrety mog\u0105 te\u017c by\u0107 stworzone 'w locie', na podstawie warto\u015bci zmiennej \u015brodowiskowej: <pre><code>secrets:\n    npm_token:\n        environment: NPM_TOKEN\n</code></pre></p>"},{"location":"devops/gcp/notes1/","title":"Notes1","text":"<pre><code>ssh-keygen -t rsa -b 2048 -f ./ssh/key -C ubuntu \n</code></pre>"},{"location":"devops/jenkins/notes1/","title":"Basic configuration","text":""},{"location":"devops/jenkins/notes1/#podstawowe-komendy-dot-zarzadzania-uzytkownikami-na-linux","title":"Podstawowe komendy dot. zarz\u0105dzania u\u017cytkownikami na Linux","text":"<pre><code># Tworzenie nowego u\u017cytkownika\nsudo adduser root \n\n# Dodanie u\u017cytkownika do grupy sudo \nsudo usermod -aG sudo root \n\n# Prze\u0142\u0105czanie na nowego u\u017cytkownika \nsu - root \n\n# Zmiana has\u0142a u\u017cytkownika \nsudo passwd root \n</code></pre>"},{"location":"devops/jenkins/notes1/#instalacja","title":"Instalacja","text":"<p>Zawsze najpierw zainstaluj SDK Java, nast\u0119pnie Jenkinsa. Instrukcja krok po kroku: <code>https://www.jenkins.io/doc/book/installing/linux/</code></p>"},{"location":"devops/jenkins/notes1/#instalacja-na-lekkich-obrazach-w-docker","title":"Instalacja na lekkich obrazach w Docker","text":"<p>Nie u\u017cywa si\u0119 obraz\u00f3w ubuntu, lecz gotowych obraz\u00f3w <code>jenkins:lts</code>.</p> <pre><code>docker network create --driver bridge --subnet 172.25.0.0/24 jenkins-network \n\ndocker run -dit --name jenkins-server-1 --network jenkins-network --ip 172.25.0.2 -p 2222:22 ubuntu:22.04\ndocker run -dit --name jenkins-agent-1  --network jenkins-network --ip 172.25.0.3 -p 2223:22 ubuntu:22.04\n\ndocker exec -it jenkins-server-1 bash\n    apt update\n    apt install openssh-server\n    service ssh start\n    passwd\n\nssh root@localhost -p 2222\n</code></pre>"},{"location":"devops/jenkins/notes1/#konfiguracja-agenta-i-poaczenia-przez-ssh","title":"Konfiguracja agenta i po\u0142\u0105czenia przez SSH","text":"<p>Konfiguracja agenta i po\u0142\u0105czenie przez SSH (wraz z walidacj\u0105 <code>known hosts</code>) sk\u0142ada si\u0119 z kilku krok\u00f3w, kt\u00f3re trzeba wykonywa\u0107 na odpowiednich maszynach!</p> <p>Na agencie:</p> <ol> <li>Stw\u00f3rz w katalogu g\u0142\u00f3wnym (domy\u015blnie <code>/home/ubuntu</code>), katalog roboczy dla agenta np. <code>/jenkins-agent</code>. </li> <li>Przejd\u017a do folderu <code>/home/ubuntu/.ssh</code>. </li> <li>Wygeneruj klucz publiczny i prywatny do komunikacji SSH komend\u0105: <code>ssh-keygen -t rsa -m PEM -f \"jenkins_agent_rsa\"</code></li> <li>Dodaj klucz publiczny do pliku <code>authorized_keys</code>, kt\u00f3re znajduje si\u0119 w tym samym folderze, co wygenerowane klucze. Mo\u017cna to zrobi\u0107 poleceniem <code>echo</code> i operatorem <code>&gt;&gt;</code>. </li> </ol> <p>Na g\u0142\u00f3wnym serwerze:</p> <ol> <li>Przejd\u017a do folderu <code>/var/lib/jenkins</code> - jest to katalog serwisu Jenkins. Stw\u00f3rz w tym katalogu folder <code>.ssh</code> oraz plik <code>known_hosts</code>. </li> <li>Wykonaj polecenie <code>sudo sh -c 'ssh-keyscan -H 3.127.107.212 &gt;&gt; /var/lib/jenkins/.ssh/known_hosts'</code></li> <li>W Jenkins UI dodaj credential SSH, wklej tam, wygenerowany na agencie, klucz prywatny. Dodaj nowego agenta, podaj\u0105c adres IP i konfiguracj\u0119. </li> </ol>"},{"location":"devops/jenkins/notes1/#materiay","title":"Materia\u0142y","text":"<p><code>https://docs.dman.cloud/tutorial-documentation/install-jenkins/</code></p>"},{"location":"devops/kubernetes/notes1/","title":"Basic commands","text":"<pre><code>kubectl create deployment hello-minikube --image=kicbase/echo-server:1.0 \nkubectl get deployment hello-minikube \n\nkubectl get pods -l app=hello-minikube # get pods with such a key-value label\nkubectl get pods -A # same as kubectl get pods --all-namespaces\nkubectl get nodes \n\nkubectl get logs hello-minikube-ffcbb5874-x6jkt\nkubectl describe pod hello-minikube-ffcbb5874-x6jkt\n</code></pre> <pre><code># get current context's info\nkubectl config current-context\n\n# list all saved contexts \nkubectl config get-contexts \n\nkubectl delete deployments/kubernetes-bootcamp\nkubectl delete services/kubernetes-bootcamp\n\n# add label version=v1 to the pod\nkubectl label pods kubernetes-bootcamp-12c24d version=v1 \n</code></pre> <pre><code>minikube start -p minikube \nminikube profile list\n\nminikube delete --all # deletes all clusters \n\nminikube ip\n</code></pre>"},{"location":"devops/kubernetes/notes2/","title":"Services","text":""},{"location":"devops/kubernetes/notes2/#services","title":"Services","text":"<p>Ka\u017cdy Pod w Kubernetesie ma unikalny adres IP, ale te adresy nie s\u0105 widoczne na zewn\u0105trz klastra bez u\u017cycia obiektu typu Service. Service pozwala aplikacjom na odbieranie ruchu (np. od u\u017cytkownika lub innej aplikacji). Istniej\u0105 r\u00f3\u017cne typy us\u0142ug, kt\u00f3re okre\u015bla si\u0119 za pomoc\u0105 pola type w specyfikacji Service:</p> <ol> <li> <p>ClusterIP (domy\u015blny) Wystawia us\u0142ug\u0119 pod wewn\u0119trznym adresem IP dost\u0119pnym tylko wewn\u0105trz klastra. Tego typu Service jest widoczny wy\u0142\u0105cznie dla innych komponent\u00f3w dzia\u0142aj\u0105cych w Kubernetesie. Idealne do komunikacji mi\u0119dzy Podami.</p> </li> <li> <p>NodePort Wystawia us\u0142ug\u0119 na tym samym porcie na ka\u017cdym Node w klastrze. Dzia\u0142a poprzez NAT \u2013 umo\u017cliwia dost\u0119p do us\u0142ugi z zewn\u0105trz, poprzez adres IP Node i przypisany port. Rozszerza mo\u017cliwo\u015bci ClusterIP, poniewa\u017c Service nadal ma wewn\u0119trzny IP, ale dodatkowo jest dost\u0119pny z zewn\u0105trz. U\u017cywane np. w \u015brodowiskach lokalnych lub do szybkiego testowania.</p> </li> <li> <p>LoadBalancer Tworzy zewn\u0119trzny load balancer w infrastrukturze chmurowej (je\u015bli jest obs\u0142ugiwany przez danego dostawc\u0119, np. AWS, GCP, Azure). Przydziela publiczny adres IP, przez kt\u00f3ry mo\u017cna uzyska\u0107 dost\u0119p do us\u0142ugi. Oparty na NodePort i ClusterIP, ale dodaje mo\u017cliwo\u015b\u0107 automatycznego wystawienia us\u0142ugi na zewn\u0105trz przez us\u0142ug\u0119 chmurow\u0105.</p> </li> <li> <p>ExternalName Nie wystawia us\u0142ugi przez proxy. Zamiast tego tworzy wpis DNS, kt\u00f3ry wskazuje na zewn\u0119trzn\u0105 nazw\u0119 domenow\u0105 (np. foo.bar.example.com). Kubernetes zwraca rekord CNAME, a nie wykonuje \u017cadnego routingu wewn\u0119trznego. Wymaga kube-dns w wersji 1.7 lub nowszej albo CoreDNS 0.0.8 lub nowszej.</p> </li> </ol> <pre><code>kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1\n\nkubectl expose deployment/kubernetes-bootcamp --type=\"NodePort\" --port 8080\nminikube service kubernetes-bootcamp \n</code></pre> <p>Serwisy grupuj\u0105 zbi\u00f3r set\u00f3w na podstawie <code>label</code>. </p>"},{"location":"devops/kubernetes/notes3/","title":"Rollouts","text":"<p>Kubernetes umo\u017cliwia wprowadzanie zmian bez przerwy w dzia\u0142aniu aplikacji. Gdy pojawia si\u0119 nowa wersja, tworzy nowego poda i usuwa starego - jest to zatem taki proces iteracyjny, a\u017c zostan\u0105 same nowe pody. </p> Aktualizacja obrazu to nowszej wersji<pre><code># 1. update image to a newer version \nkubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=docker.io/jocatalin/kubernetes-bootcamp:v2\n\n# 2. check status of the rollout\nkubectl rollout status deployments/kubernetes-bootcamp\n\n# 3. check if pods are running correctly\nkubectl get pods\n\n# 4. make a mistake - image doesn't exist in repository\nkubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10\n\n# 5. revert the deployment to the previous version \nkubectl rollout undo deployments/kubernetes-bootcamp\n</code></pre> <pre><code>kubectl rollout history deployment/myapp\nkubectl rollout undo deployment/myapp --to-revision=2\n</code></pre>"},{"location":"devops/kubernetes/notes4/","title":"ConfigMap","text":"<p>ConfigMap s\u0142u\u017cy do przekazywania konfiguracji, czy zmiennych \u015brodowiskowych do pod\u00f3w. Mapy mo\u017cna tworzy\u0107 bezpo\u015brednio z plik\u00f3w, np. <code>app.properties</code> lub przekaza\u0107 klucz-warto\u015b\u0107. </p> <pre><code># creates configmap of name: sport, with one key-value-pair: sport-football\nkubectl create configmap sport --from-literal=sport-football\n</code></pre> <p>Mapy mo\u017cna te\u017c edytowa\u0107, a zmiany b\u0119d\u0105 widoczne prawie natychmiast: <pre><code>kubectl edit configmap sport \n</code></pre></p> <p>Przyk\u0142adowo, przy tworzeniu kontenera, mo\u017cemy u\u017cy\u0107 ConfigMapy do stworzenia zmiennej \u015brodowiskowej:</p> <pre><code>...\nenv:\n    - name: FRUITS\n        valueFrom:\n        configMapKeyRef:\n            key: fruits\n            name: fruits\n...\n# creates an environment variable named FRUITS with the value taken from the fruits key in the fruits ConfigMap\n</code></pre> <p>Aktualizacje zmiennych \u015brodowiskowych</p> <p>Zmiana warto\u015bci w ConfigMapie, kt\u00f3rej zawarto\u015b\u0107 jest u\u017cywana, jako zmienna \u015brodowiskowa, nie powoduje zmiany tej zmiennej w ju\u017c dzia\u0142aj\u0105cym podzie (w przeciwie\u0144stwie do zwyk\u0142ych danych). Mo\u017cna zrestartowa\u0107 pody, wywo\u0142uj\u0105c: <code>kubectl rollout restart deployment/deployment-name</code> - wtedy zmiany b\u0119d\u0105 widoczne.</p>"},{"location":"devops/notes/notes1/","title":"Github Actions workflows","text":"<p>Je\u015bli korzystamy z GCP Artifact Registry, to trzeba stworzy\u0107 konto serwisowe, pobra\u0107 dane uwierzytelniaj\u0105ce w formacie JSON, i doda\u0107 je jako sekret repozytorium, by m\u00f3c pushowa\u0107 zbudowane obrazy.</p> <ol> <li>Workflow for testing Java service</li> <li>Workflow for building/deploying Java service</li> </ol>"},{"location":"devops/notes/notes2/","title":"Docker/Docker compose architecture","text":"<p>Podstawowe informacje o Docker compose</p> <p>Mamy kilka serwis\u00f3w i chcemy mie\u0107 mo\u017cliwo\u015b\u0107 ich uruchomienia, ale te\u017c pracy nad konkretnym. </p> <p>W ka\u017cdym serwisie umieszczamy, w g\u0142\u00f3wnym folderze, plik <code>docker-compose.yaml</code>, kt\u00f3ry konfiguruje uruchomienie ka\u017cdego serwisu (wraz z jego baz\u0105 danych) i plik <code>Dockerfile</code> do budowania obrazu aplikacji. </p> <p>Zmienne \u015brodowiskowe do uruchomienia aplikacji i bazy danych pobierane s\u0105 z odpowiedniego folderu danego serwisu (np. <code>../product-service/docker/</code>) - wi\u0119c w ka\u017cdym serwisie tworzymy te\u017c katalog <code>/docker</code> zawieraj\u0105cy np. <code>app-env.txt</code>, <code>database-env.txt</code> i <code>database-password.txt</code>. </p> <p>W tym folderze <code>/docker</code> umieszczamy te\u017c osobny plik <code>docker-compose.yaml</code>, kt\u00f3ry uruchamia lokaln\u0105 baz\u0119 danych, do pracy w izolacji od innych. </p> <pre><code>service/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 docker-compose.yaml\n\u2514\u2500\u2500 docker/\n    \u251c\u2500\u2500 docker-compose.yaml\n    \u251c\u2500\u2500 app-env.txt\n    \u251c\u2500\u2500 database-password.txt\n    \u2514\u2500\u2500 database-env.txt\n</code></pre> <p>Dla ka\u017cdego serwisu, g\u0142\u00f3wny plik <code>docker-compose.yaml</code> jest taki sam - korzystamy natomiast z profili i mo\u017cliwo\u015bci definiowania serwis\u00f3w, kt\u00f3re b\u0119d\u0105 uruchamiane (robi si\u0119 to w pliku <code>.env</code>). </p> <pre><code>...\nCOMPOSE_PROFILES=payment-service,order-service,cart-service,kafka\n...\n</code></pre> <p>Lista plik\u00f3w: </p> <ul> <li>Main docker-compose.yaml</li> <li>Local docker-compose.yaml</li> <li>Dockerfile</li> <li>.env</li> <li>database-env.txt</li> <li>database-password.txt</li> <li>app-env.txt</li> <li>pom.xml</li> </ul> application.properties<pre><code>spring.application.name=Product service\nspring.profiles.active=dev\n\nspring.jpa.hibernate.ddl-auto=none\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.show-sql=true\n</code></pre> application-dev.properties<pre><code>spring.datasource.url=jdbc:postgresql://localhost:5432/product-service-db\nspring.datasource.username=admin\nspring.datasource.password=admin\n\nspring.kafka.bootstrap-servers=localhost:9094\n\nspring.kafka.consumer.group-id=product-service\nspring.kafka.consumer.auto-offset-reset=earliest\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n</code></pre> application-compose.properties<pre><code>spring.datasource.url=jdbc:postgresql://product-service-db:5432/product-service-db\n\nspring.kafka.bootstrap-servers=kafka:9092\n\nspring.kafka.consumer.group-id=product-service\nspring.kafka.consumer.auto-offset-reset=earliest\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n</code></pre>"},{"location":"devops/notes/notes3/","title":"Github Action workflows","text":""},{"location":"devops/notes/notes34/","title":"Notes34","text":"<p><code>mvn clean install -U</code> <code>mvn dependency:purge-local-repository</code></p> <pre><code>&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt;\n&lt;servers&gt;\n    &lt;server&gt;\n        &lt;id&gt;nexus-ecmsp-snapshots&lt;/id&gt; \n        &lt;username&gt;nexus-ecmsp-client&lt;/username&gt;\n        &lt;password&gt;nexus&lt;/password&gt;\n    &lt;/server&gt;\n    &lt;server&gt;\n        &lt;id&gt;nexus-ecmsp-releases&lt;/id&gt; \n        &lt;username&gt;nexus-ecmsp-client&lt;/username&gt;\n        &lt;password&gt;nexus&lt;/password&gt;\n    &lt;/server&gt;\n&lt;/servers&gt;\n\n     &lt;mirrors&gt;\n          &lt;mirror&gt;\n               &lt;id&gt;maven-default-http-blocker&lt;/id&gt;\n               &lt;mirrorOf&gt;dummy&lt;/mirrorOf&gt;\n               &lt;name&gt;Dummy mirror to override default blocking mirror that blocks http&lt;/name&gt;\n               &lt;url&gt;http://0.0.0.0/&lt;/url&gt;\n         &lt;/mirror&gt;\n    &lt;/mirrors&gt;\n&lt;/settings&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.ecmsp&lt;/groupId&gt;\n    &lt;artifactId&gt;protos&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;nexus-ecmsp-releases&lt;/id&gt;\n        &lt;name&gt;nexus-ecmsp-releases&lt;/name&gt;\n        &lt;url&gt;https://nexus.ecmsp.pl/repository/maven-releases/&lt;/url&gt;\n    &lt;/repository&gt;\n    &lt;repository&gt;\n        &lt;id&gt;nexus-ecmsp-snapshots&lt;/id&gt;\n        &lt;name&gt;nexus-ecmsp-snapshots&lt;/name&gt;\n        &lt;url&gt;https://nexus.ecmsp.pl/repository/maven-snapshots/&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;        \n</code></pre> <pre><code>services:\n  nexus:\n    image: sonatype/nexus3:latest\n    container_name: nexus\n    ports:\n      - \"80:8081\"\n    volumes:\n      - nexus-data:/nexus-data\n    restart: unless-stopped\n\nvolumes:\n  nexus-data:\n</code></pre> <pre><code>name: Compile Proto Artifacts using Buf\n\non:\n    pull_request:\n        branches: [main2]\n    push:\n        branches: [main2]\n    workflow_dispatch:\n\njobs:\n    compile-proto:\n        runs-on: ubuntu-latest\n\n        steps:\n            - \n                name: Checkout\n                uses: actions/checkout@v4\n\n            -\n                name: Setup Java\n                uses: actions/setup-java@v3\n                with:\n                    distribution: 'temurin'\n                    java-version: '21'\n\n            - \n                name: Install Protoc\n                uses: arduino/setup-protoc@v3             \n\n            - \n                name: Replace Secrets in pom.xml and settings.xml\n                run: |\n                    sed -i \"s|\\${secrets.NEXUS_URL}|${{ secrets.NEXUS_URL }}|g\" pom.xml \n                    sed -i \"s|\\${secrets.NEXUS_USERNAME}|${{ secrets.NEXUS_USERNAME }}|g\" .m2/settings.xml \n                    sed -i \"s|\\${secrets.NEXUS_PASSWORD}|${{ secrets.NEXUS_PASSWORD }}|g\" .m2/settings.xml \n\n            -\n                name: Copy Proto files to separate folder\n                run: |\n                    mkdir -p generated/.m2\n                    mkdir -p generated/src/main/java/\n                    mkdir -p generated/src/main/proto\n                    cp -r protos generated/src/main/proto\n                    cp .m2/settings.xml generated/.m2/\n                    cp pom.xml generated/\n\n            - \n                name: Compile, Build and Deploy\n                working-directory: ./generated\n                run: |\n                    protoc -I=src/main/proto --java_out=src/main/java $(find src/main/proto -name \"*.proto\")\n                    mvn -B -s .m2/settings.xml clean deploy\n\n            -\n                name: Commit and push stubs to proto-stubs-view repository\n                run: |\n                    BRANCH_NAME=stubs-update-$(echo $GITHUB_SHA | cut -c1-7)\n\n                    git config --global user.name \"github-actions\"\n                    git config --global user.email \"actions@github.com\"\n                    git clone https://x-access-token:${{ secrets.ACTIONS_USER_TOKEN }}@github.com/ecmsp-project/proto-stubs-view.git\n\n                    cd proto-stubs-view \n                    git checkout -b $BRANCH_NAME\n                    cp -r ../generated/* .\n                    rm -rf .m2\n                    git add .\n                    git commit -m \"compile new version of .proto files\"\n\n                    git checkout main\n                    git reset --hard $BRANCH_NAME\n                    git push origin main --force\n</code></pre> <p>schema-definitions-repository</p>"},{"location":"erlang/otp/notes1/","title":"Signals/exit trapping","text":"<p>Sygna\u0142y EXIT, od proces\u00f3w innych ni\u017c rodzic, mo\u017cna obs\u0142ugiwa\u0107 w funkcji <code>handle-info</code>. <pre><code>handle_info({'EXIT', FromPid, Reason}, State) -&gt;\n    io:format(\"...\", []),\n    {noreply, State};\n</code></pre></p> <p>Je\u015bli <code>gen_server</code> jest cz\u0119\u015bci\u0105 drzewa nadzorcy i dosta\u0142 instrukcj\u0119 zako\u0144czenia, funkcja <code>terminate/2</code> jest wywo\u0142ana z powodem <code>Reason=shutdown</code>, gdy spe\u0142nione s\u0105 nast\u0119puj\u0105ce warunki:</p> <ul> <li><code>gen_server</code> ustawi\u0142 opcj\u0119 <code>process_flag(trap_exit, true)</code></li> <li><code>shutdown</code> w specyfikacji dziecka jest dodani\u0105 liczb\u0105 ca\u0142kowit\u0105, a nie <code>brutal_kill</code> </li> </ul> <p>Nawet je\u015bli <code>gen_server</code> nie jest cz\u0119\u015bci\u0105 drzewa, to funkcja <code>terminate/2</code> jest wywo\u0142ana, je\u015bli otrzyma wiadomo\u015b\u0107 <code>EXIT</code> od swojego rodzica. Pow\u00f3d jest wtedy taki sam, jak ten w wiadomo\u015bci <code>EXIT</code>. </p> <p>Je\u015bli funkcja <code>terminate/2</code> zostanie wywo\u0142ana z innym b\u0142\u0119dem ni\u017c <code>normal</code>, <code>shutdown</code>, <code>{shutdown, Term}</code>, framework OTP uzna to za pora\u017ck\u0119 i b\u0119dzie printowa\u0107 troszk\u0119 wi\u0119cej log\u00f3w/opis\u00f3w b\u0142\u0119du. </p>"},{"location":"erlang/otp/notes2/","title":"Supervisor","text":"<p>Przyk\u0142adowy supervisor: <pre><code>-behaviour(supervisor).\n\ninit(_) -&gt;\n    SupFlags = #{\n        strategy =&gt; one_for_one,\n        intensity =&gt; 2,\n        period =&gt; 10\n    },\n\n    ChildSpec = #{\n        id =&gt; 1,\n        start =&gt; {people_db, start_link, []},\n        modules =&gt; [people_db],\n        restart =&gt; permanent, \n        type =&gt; worker,\n        shutdown =&gt; 3000\n    },\n    {ok, {SupFlags, [ChildSpec]}}.\n\nstart_link() -&gt;\n    supervisor:start_link({local, ?MODULE}, ?MODULE, []).\n</code></pre></p>"},{"location":"erlang/otp/notes3/","title":"Struktura folder\u00f3w","text":"<p>W folderze \u017ar\u00f3d\u0142owym, mamy nast\u0119puj\u0105ce foldery: <pre><code>ebin/\ninclude/\npriv/\nsrc/\n    - app_sup.erl\n    - ...\ntest/\n</code></pre></p> <p>Folder <code>/ebin</code> przechowuje skompilowane pliki, <code>include/</code> pliki nag\u0142\u00f3wkowe <code>.hrl</code>, <code>/priv</code> pliki wykonywalne i inne, a <code>src/</code> pliki \u017ar\u00f3d\u0142owe. </p>"},{"location":"erlang/otp/notes3/#emakefile","title":"Emakefile","text":"<p>Aby upro\u015bci\u0107 prac\u0119 z wieloma plikami, mo\u017cna doda\u0107 plik <code>Emakefile</code>, kt\u00f3ry informuje kompilator, w jaki spos\u00f3b kompilowa\u0107 i gdzie umieszcza\u0107 pliki.</p> Emakefile<pre><code>{'src/*', [\n    debug_info,\n    {i, \"src\"},\n    {i, \"include\"},\n    {outdir, \"ebin\"}\n]}.\n</code></pre> <p>Kompilator b\u0119dzie szuka\u0107 plik\u00f3w w katalogu <code>src/</code> i <code>include/</code>, a umie\u015bci je w <code>ebin/</code>. </p> <pre><code>erl -make \nerl -pa ebin/\n\nerl\n    make:all([load])\n</code></pre>"},{"location":"erlang/otp/notes3/#plik-aplikacji","title":"Plik aplikacji","text":"<p>Trzeba te\u017c doda\u0107 plik aplikacji. Umieszcza si\u0119 w katalogu i nazywa:  - katalog <code>ebin/</code>, nazwa <code>&lt;yourapp&gt;.app</code> - katalog <code>src/</code>, nazwa <code>&lt;myapp&gt;.app.src</code> </p> <p>Struktura pliku jest nast\u0119puj\u0105ca: <pre><code>{application, ppool, [\n    {vsn, \"1.0.0\"},\n    {modules, [ppool, ppool_serv, ppool_sup, ppool_supersup, ppool_worker_sup]},\n    {registered, [ppool]},\n    {mod, {ppool, []}},\n    {env, [{Key, Val}]}\n]}.\n</code></pre></p>"},{"location":"go/","title":"Go","text":""},{"location":"go/basics/","title":"Go basics","text":""},{"location":"go/basics/1_net_http/","title":"Net/HTTP library","text":""},{"location":"go/basics/1_net_http/#funkcje-handlujace","title":"Funkcje handluj\u0105ce","text":"<p>Aby odpowiada\u0107 na zapytania, musimy stworzy\u0107 funkcje handluj\u0105c\u0105 i przypisa\u0107 j\u0105 do \u015bcie\u017cki. U\u017cywamy <code>http.HandleFunc</code>, kt\u00f3ra przyjmuje \u015bcie\u017ck\u0119 oraz funkcj\u0119 o specjalnej sygnaturze.  <pre><code>func d(res http.ResponseWriter, req *http.Request) {\n    io.WriteString(res, \"dog dog dog\")\n}\n\nhttp.HandleFunc(\"/dog\", d)\nhttp.ListenAndServe(\":8080\", nil)\n</code></pre></p> <p>Mo\u017cemy te\u017c u\u017cy\u0107 funkcji http.Handle, podobnej do <code>http.HandleFunc</code>. Ta funkcja przyjmuje tak\u017ce \u015bcie\u017ck\u0119 oraz obiekt typu Handler, kt\u00f3ry realizuje specjalny interface. Mo\u017cna u\u017cy\u0107 funkcji <code>http.HandlerFunc</code>, kt\u00f3ra jako argument przyjmuje funkcj\u0119 o specjalnej sygnaturze i zwraca obiekt typu <code>Handler</code>.  <pre><code>func c(res http.ResponseWriter, req *http.Request) {\n    io.WriteString(res, \"cat cat cat\")\n}\n\nfunc main() {\n    http.Handle(\"/dog\", http.HandlerFunc(d))\n    http.ListenAndServe(\":8080\", nil)\n}    \n</code></pre></p>"},{"location":"go/basics/1_net_http/#wysyanie-zapytania","title":"Wysy\u0142anie zapytania","text":"<p>Wys\u0142anie zapytania sk\u0142ada si\u0119 z cz\u0119\u015bci: 1. Utworzenie nowego zapytania: <pre><code>url := \"https://api.example.com/data\"\nreq, err := http.NewRequest(\"GET\", url, nil)\nreq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n</code></pre> 2. Utworzenie klienta i wys\u0142anie zapytania: <pre><code>client := &amp;http.Client{}\nresp, err := client.Do(req)\n</code></pre> Powy\u017cszy spos\u00f3b jest og\u00f3lny. Mo\u017cemy tak wys\u0142a\u0107 dowolne zapytanie. Je\u015bli jednak chcemy ograniczy\u0107 si\u0119 tylko do GET lub POST, mo\u017cemy to zrobi\u0107 tak: <pre><code>func (c *Client) Get(url string) (resp *Response, err error\nfunc (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error)\n</code></pre></p>"},{"location":"go/basics/1_net_http/#odbieranie-zapytania-post","title":"Odbieranie zapytania POST","text":"<p>Odbieraj\u0105c zapytanie mamy dost\u0119p do wska\u017anika do struktury <code>*http.Request</code>. Nale\u017cy wtedy wykona\u0107 odpowiednie funkcje: </p> <code>req.ParseForm()</code> \u2013 parsuje dane formularza przes\u0142ane dan\u0105 metod\u0105 (POST)  <code>req.PostForm.Get(\"name\")</code> <p>Uwaga</p> <p>Zawsze nale\u017cy wykona\u0107 komend\u0119: <pre><code>defer resp.Body.Close()\n</code></pre></p>"},{"location":"go/basics/1_net_http/#servemux-method-based-routing","title":"ServeMux, method based routing","text":"<p>Mo\u017cna tworzy\u0107 drzewa multiplekser\u00f3w, kt\u00f3re b\u0119d\u0105 handlowa\u0107 zapytaniami.  <pre><code>router := http.NewServeMux() \nsubrouter := http.NewServeMux() \nsubrouter.HandleFunc(...)\n</code></pre> Teraz, aby doda\u0107 rodzin\u0119 adres\u00f3w dla podroutera dla danego prefiksu wywo\u0142ujemy na gl\u00f3wnym routerze: <code>router.Handle(\"/api/\", http.StripPrefix(\"/api\", subrouter))</code> Zauwazmy, ze <code>http.ServeMux</code> implementuje interfejs <code>Handler</code>. </p> <p>Informacja</p> <p>Od wersji 1.22 mo\u017cemy definiowa\u0107 funkcje handluj\u0105ce na danego rodzaju zapytania: <pre><code>router.HandleFunc(\"POST /api\", ...) \n</code></pre></p>"},{"location":"grpc-go-java/notes1/","title":"gRPC setup in Go","text":""},{"location":"grpc-go-java/notes1/#ustawienia-poczatkowe-go","title":"Ustawienia pocz\u0105tkowe - Go","text":"<p>Nale\u017cy pobra\u0107 i zainstalowa\u0107 kompilator <code>Protoc</code>, nast\u0119pnie pluginy dla j\u0119zyka Go: <pre><code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n</code></pre></p> <p>Trzeba tak\u017ce pobra\u0107 biblioteki do obs\u0142ugi GRPC w Go: <pre><code>go get google.golang.org/grpc\n</code></pre></p>"},{"location":"grpc-go-java/notes1/#tworzenie-podstawowych-plikow-proto","title":"Tworzenie podstawowych plik\u00f3w Proto","text":"<p>Pliki mo\u017cemy umie\u015bci\u0107 np. w folderze <code>/proto</code>. Przyk\u0142adowy plik wygl\u0105da nast\u0119puj\u0105co: <pre><code>syntax = \"proto3\";\n\n// Nazwa paczki protoko\u0142u - identyfikacja plik\u00f3w Proto\npackage pb;\n\n// Nazwa pakietu dla wygenerowanych plik\u00f3w Go\noption go_package = \"[project_name]/pb\";\n\nmessage CPU {\n    string brand = 1; \n    string name  = 2;\n    uint32 number_cores   = 3; \n    uint32 number_threads = 4;\n    double min_ghz = 5;    \n    double max_ghz = 6;\n}\n</code></pre></p> <p>Do kompilacji plik\u00f3w u\u017cywamy polecenia: <pre><code>protoc \n    --proto_path=proto // wzgl\u0119dna lokalizacja plik\u00f3w Proto \n    --go_out=pb --go_opt=paths=source_relative \\ // miejsce generowania plik\u00f3w wiadomo\u015bci\n    --go-grpc_out=pb --go-grpc_opt=paths=source_relative \\ // miejsce generowania interfejsu klienta i serwera \n    proto/*.proto // lokalizacja plik\u00f3w .proto\n</code></pre></p>"},{"location":"grpc-go-java/notes1/#zaawansowane-struktury-w-plikach-proto","title":"Zaawansowane struktury w plikach Proto","text":"<pre><code>import \"google/protobuf/timestamp.proto\";\n\nmessage Laptop {\n    repeated GPU gpus = 6; \n    repeated Storage storages = 7;\n\n    oneof weight {\n        double weight_kg = 10;\n        double weight_lb = 11;\n    }\n\n    google.protobuf.Timestamp updated_at = 14; \n}\n</code></pre> <p>Aby p\u00f3\u017aniej u\u017cy\u0107 pakietu <code>time</code> w Go, musimy przekonwertowa\u0107 t\u0119 struktur\u0119 na <code>timestamp</code> (wi\u0119cej informacji pod: <code>protobuf golang github</code>) <pre><code>import \"google.golang.org/protobuf/types/known/timestamppb\"\nupdated_at := timestamppb.New(time.Now())\n</code></pre></p> <p>Og\u00f3lnie, wszystkie rzeczy zwi\u0105zane z <code>Protoc</code> s\u0105 w\u0142a\u015bnie do znalezienia w tym repozytorium. </p>"},{"location":"grpc-go-java/notes2/","title":"gRPC setup in Java","text":""},{"location":"grpc-go-java/notes2/#ustawienia-poczatkowe-java","title":"Ustawienia pocz\u0105tkowe - Java","text":"<p>Podobnie, jak w Go, musimy pobra\u0107 pluginy Protoc dla Javy i doda\u0107 biblioteki obs\u0142uguj\u0105ce gRPC w Javie. Potrzebne wpisy mo\u017cemy znale\u017a\u0107, wyszukuj\u0105c frazy: <code>java grpc github</code>, czy <code>protobuf gradle plugin</code>. W pliku <code>build.gradle</code> dodajemy: <pre><code>plugins {\n    id 'java'\n    id \"com.google.protobuf\" version \"0.9.5\"\n}\n\ndependencies {\n    implementation(\"com.google.protobuf:protobuf-java:4.30.2\")\n\n    runtimeOnly 'io.grpc:grpc-netty-shaded:1.72.0'\n    implementation 'io.grpc:grpc-protobuf:1.72.0'\n    implementation 'io.grpc:grpc-stub:1.72.0'\n    implementation(\"javax.annotation:javax.annotation-api:1.3.2\")\n}\n\nsourceSets {\n    main {\n        java {\n            srcDirs 'build/generated/source/proto/main/grpc'\n            srcDirs 'build/generated/source/proto/main/java'\n        }\n    }\n}\n\nprotobuf {\n    protoc {\n        artifact = \"com.google.protobuf:protoc:3.25.5\"\n    }\n    plugins {\n        grpc {\n            artifact = 'io.grpc:protoc-gen-grpc-java:1.72.0'\n        }\n    }\n    generateProtoTasks {\n        all()*.plugins {\n            grpc {}\n        }\n    }\n}\n</code></pre></p> <p>W plikach Proto mo\u017cemy doda\u0107 opcj\u0119: <pre><code>// Nazwa pakietu dla wygenerowanych plik\u00f3w Java\noption java_package = \"com.pcbook.pb\";\n\n// Dzieli wygenerowane pliki, aby by\u0142y czytelniesze \noption java_multiple_files = true; \n</code></pre></p> <p>Po klikni\u0119ciu opcji <code>Build</code> projektu, wszystkie pliki <code>.proto</code>, umieszczone w folderze <code>src/main/proto</code> zostan\u0105 automatycznie skompilowane i umieszczone w odpowiednich folderach. </p> <p>W celu zmiany domy\u015blnego folderu z plikami <code>.proto</code> dodaj do <code>build.gradle</code>: <pre><code>sourceSets {\n    main {\n        java {\n            srcDirs 'build/generated/source/proto/main/grpc'\n            srcDirs 'build/generated/source/proto/main/java'\n        }\n        proto {\n            srcDir 'src/main/proto2'  // \u2190 tu podajesz w\u0142asny katalog z .proto\n        }\n    }\n}\n</code></pre></p>"},{"location":"grpc-go-java/notes2/#tworzenie-przykadowych-obiektow-messages-w-javie","title":"Tworzenie przyk\u0142adowych obiekt\u00f3w (messages) w Javie","text":"<p>Wygenerowany kod jest do\u015b\u0107 bogaty - umo\u017cliwia \u0142atwe tworzenie obiekt\u00f3w, z pomoc\u0105 wzorca <code>Builder</code>.</p> <pre><code>public Keyboard NewKeyboard() {\n    return Keyboard.newBuilder()\n        .setLayout(randomKeyboardLayout())\n        .setBacklit(rand.nextBoolean())\n        .build();\n}\n</code></pre> <pre><code>// Obiekt Timestamp Proto, z biblioteki google.Protobuf\nprivate Timestamp timestampNow() {\n    Instant now = Instant.now();\n    return Timestamp.newBuilder()\n        .setSeconds(now.getEpochSecond())\n        .setNanos(now.getNano())\n        .build();\n}\n</code></pre>"},{"location":"grpc-go-java/notes3/","title":"Serialization - Go","text":"<p>Przyk\u0142adowa serializacja danych do plik\u00f3w binarnych i plik\u00f3w JSON:</p> <pre><code>import (\n    \"fmt\"\n    \"os\"\n\n    \"google.golang.org/protobuf/encoding/protojson\"\n    \"google.golang.org/protobuf/proto\"\n)\n\nfunc ProtobufToJSON(message proto.Message) ([]byte, error) {\n    data, err := protojson.Marshal(message)\n    if err != nil {\n        return nil, fmt.Errorf(\"cannot marshal proto message to json format: %s\", err)\n    }\n    return data, err\n}\n\nfunc WriteProtobufToJSONFile(message proto.Message, filename string) error {\n    data, err := ProtobufToJSON(message)\n    if err != nil {\n        return err \n    }\n\n    err = os.WriteFile(filename, data, 0644)\n    if err != nil {\n        return fmt.Errorf(\"cannot  write binary data to file: %w\", err)\n    }\n\n    return nil \n}\n\nfunc WriteProtobufToBinaryFile(message proto.Message, filename string) error {\n    data, err := proto.Marshal(message)\n    if err != nil {\n        return fmt.Errorf(\"cannot marshal proto message: %w\", err)\n    }\n\n    err = os.WriteFile(filename, data, 0644)\n    if err != nil {\n        return fmt.Errorf(\"cannot write binary data to file: %w\", err)\n    }\n\n    return nil\n}\n\nfunc ReadProtobufFromBinaryFile(filename string, message proto.Message) error {\n    data, err := os.ReadFile(filename)\n    if err != nil {\n        return fmt.Errorf(\"cannot read binary data from file: %w\", err)\n    }\n\n    err = proto.Unmarshal(data, message)\n    if err != nil {\n        return fmt.Errorf(\"cannot unmarshal binary to proto message: %w\", err)\n    }\n\n    return nil \n}\n</code></pre>"},{"location":"grpc-go-java/notes4/","title":"Serialization - Java","text":"<pre><code>laptop.getParserForType();\n\npublic static void WriteProtobufToBinaryFile(Message message, String filename) throws FileNotFoundException, IOException {\n    try (FileOutputStream fos = new FileOutputStream(filename)) {\n        message.writeTo(fos);\n    }\n}\npublic &lt;T extends Message&gt; T ReadProtobufFromBinaryFile(String filename, Parser&lt;T&gt; parser) throws FileNotFoundException, IOException {\n    try (FileInputStream fis = new FileInputStream(filename)) {\n        return parser.parseFrom(fis);\n    }\n}\n</code></pre>"},{"location":"grpc-go-java/notes5/","title":"Unary RPC - Go","text":""},{"location":"grpc-go-java/notes5/#tworzenie-interfejsu-serwera-i-klienta","title":"Tworzenie interfejsu serwera i klienta","text":"<p>Tworzymy serwis RPC w pliku np. <code>laptop_service.proto</code>: <pre><code>message CreateLaptopRequest {\n    Laptop laptop = 1; \n}\n\nmessage CreateLaptopResponse {\n    string id = 1;\n}\n\nservice LaptopService {\n    rpc CreateLaptop(CreateLaptopRequest) returns (CreateLaptopResponse) {};\n}\n</code></pre></p> <p>Musimy stworzy\u0107 serwer, kt\u00f3ry: 1. Implementuje interfejs wygenerowanego serwisu  2. Embeduje <code>pb.UnimplementedLaptopServiceServer</code> dla kompatybilno\u015bci </p> <p>Do zwracania b\u0142\u0119d\u00f3w u\u017cywa si\u0119 pakiet\u00f3w <code>status</code> oraz <code>codes</code>. Przyk\u0142adowo: <pre><code>return nil, status.Errorf(codes.InvalidArgument, \"laptop ID is not a valid UUID: %v\", err)\nreturn nil, status.Errorf(codes.Internal, ...)\n</code></pre></p>"},{"location":"grpc-go-java/notes5/#uruchomienie-i-nasuchiwanie-przez-serwer","title":"Uruchomienie i nas\u0142uchiwanie przez serwer","text":"<p>Schemat wygl\u0105da nast\u0119puj\u0105co: 1. Stw\u00f3rz instacj\u0119 struktury, kt\u00f3ra implementuje interfejs stworzonego serwisu RPC  2. Stw\u00f3rz serwer GRPC 3. Zarejestruj struktur\u0119 do serwera GRPC  4. Stw\u00f3rz obiekt <code>Listener</code>, kt\u00f3ry nas\u0142uchuje na danym porcie  5. Przeka\u017c serwerowi GRPC, aby wykorzysta\u0142 danego <code>Listenera</code> </p> <p>Przyk\u0142adowy kod: <pre><code>func main() {\n    laptopServer := service.NewLaptopServer(service.NewInMemoryLaptopStore())\n    grpcServer := grpc.NewServer()\n    pb.RegisterLaptopServiceServer(grpcServer, laptopServer)\n\n    listener, err := net.Listen(\"tcp\", \"0.0.0.0:8080\")\n    err = grpcServer.Serve(listener)\n}\n</code></pre></p>"},{"location":"grpc-go-java/notes5/#uruchomienie-i-poaczenie-klienta-z-serwerem","title":"Uruchomienie i po\u0142\u0105czenie klienta z serwerem","text":"<p>Schemat wygl\u0105da nast\u0119puj\u0105co: 1. Stw\u00f3rz po\u0142\u0105czenie z serwerem GRPC, na danym adresie  2. Stw\u00f3rz klienta, kt\u00f3ry b\u0119dzie si\u0119 z tym serwerem \u0142\u0105czy\u0142  3. Wy\u015blij odpowiednie zapytania </p> <p>Przyk\u0142adowy kod: <pre><code>func main() {\n    conn, err := grpc.NewClient(\n        \"0.0.0.0:8080\",\n        grpc.WithTransportCredentials(insecure.NewCredentials())\n    )\n\n    laptopClient := pb.NewLaptopServiceClient(conn)\n\n    laptop := sample.NewLaptop()\n    req := &amp;pb.CreateLaptopRequest{\n        Laptop: laptop,\n    }\n\n    rsp, err := laptopClient.CreateLaptop(context.Background(), req)\n}\n</code></pre></p>"},{"location":"grpc-go-java/notes5/#mozliwe-ulepszenia","title":"Mo\u017cliwe ulepszenia","text":"<p>U\u017cywaj RWMutex do cz\u0119stych operacji odczytu i rzadkich operacji zapisu. </p> <p>Wykorzystuj <code>context.WithTimeout</code> w kliencie: <pre><code>ctx, cancel = context.WithTimeout(context.Background(), 5 * time.Second)\ndefer cancel()\n</code></pre></p> <p>W serwerze mo\u017cemy wtedy sprawdzi\u0107, czy kontekst zosta\u0142 anulowany lub zosta\u0142 przekroczony ustawiony czas:   <pre><code>// Sytacja, gdy program klienta zostanie np. przerwany (wykona si\u0119 cancel())\nif ctx.Err() == context.Canceled {\n    ...\n}\n\n// Sytuacja, gdy czas zostanie przekroczony \nif ctx.Err() == context.DeadlineExceeded {\n\n}\n</code></pre></p>"},{"location":"grpc-go-java/notes6/","title":"Unary RPC - Java","text":"<p>Analogicznie, tworzymy klas\u0119, kt\u00f3ra rozszerza bazow\u0105 implementacj\u0119 serwisu. Nast\u0119pnie, mo\u017cemy przej\u015b\u0107 do konfiguracji serwera.</p>"},{"location":"grpc-go-java/notes6/#uruchomienie-i-nasuchiwanie-przez-serwer","title":"Uruchomienie i nas\u0142uchiwanie przez serwer","text":"<p>Tworzymy sobie now\u0105 klas\u0119 np. <code>LaptopServer</code>. Do rejestracji, u\u017cywamy klasy <code>ServerBuilder</code>. Zr\u00f3bmy to w konstruktorze: <pre><code>private final int port;\nprivate final Server server; // server z klasy io.GRPC\n\npublic LaptopServer(int port, LaptopStore store) {\n    this(ServerBuilder.forPort(port), port, store);\n}\npublic LaptopServer(ServerBuilder&lt;?&gt; serverBuilder, int port, LaptopStore store) {\n    this.port = port;\n\n    LaptopService laptopService = new LaptopService(store);\n    server = serverBuilder.addService(laptopService).build();\n}\n</code></pre></p> <p>Trzeba tak\u017ce stworzy\u0107 funkcj\u0119 obs\u0142uguj\u0105ce startowanie i zamykanie serwera oraz tzw. <code>shutdown hooks</code>: <pre><code>public void start() throws IOException {\n    server.start();\n    logger.info(\"server started on port \" + port);\n\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n            System.err.println(\"shut down gRPC server because JVM shuts down\");\n            try {\n                LaptopServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace(System.err);\n            }\n            System.err.println(\"server shut down\");\n        }\n    });\n}\n\npublic void stop() throws InterruptedException {\n    if (server != null) {\n        server.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n    }\n}\n\nprivate void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n        server.awaitTermination();\n    }\n}\n\npublic static void main(String[] args) throws Exception {\n    LaptopServer server = new LaptopServer(8080, store);\n    server.start();\n    server.blockUntilShutdown();\n}\n</code></pre></p> <p>W Javie dost\u0119pne s\u0105 tak\u017ce konteksty</p>"},{"location":"grpc-go-java/notes6/#uruchomienie-i-poaczenie-klienta-z-serwerem","title":"Uruchomienie i po\u0142\u0105czenie klienta z serwerem","text":"<pre><code>public class LaptopClient {\n    private static final Logger logger = Logger.getLogger(LaptopClient.class.getName());\n\n    private final ManagedChannel channel;\n    private final LaptopServiceBlockingStub blockingStub;\n\n    public LaptopClient(String host, int port) {\n        channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        blockingStub = LaptopServiceGrpc.newBlockingStub(channel);\n    }\n\n    public void shutdown() throws InterruptedException {\n        channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n\n    public void createLaptop(Laptop laptop) {\n        CreateLaptopRequest req = CreateLaptopRequest.newBuilder().setLaptop(laptop).build();\n        CreateLaptopResponse rsp = CreateLaptopResponse.getDefaultInstance();\n\n        // Mo\u017cna doda\u0107 catchowanie bardziej z\u0142o\u017conych wyj\u0105tk\u00f3w z pomoc\u0105 StatusRunTimeException!\n        try {\n            rsp = blockingStub.createLaptop(req);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"request failed: \" + e.getMessage());\n        }\n\n        logger.info(\"laptop created with ID: \" + rsp.getId());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Generator generator = new Generator();\n\n        LaptopClient client = new LaptopClient(\"0.0.0.0\", 8080);\n\n        try {\n            client.createLaptop(generator.NewLaptop());\n        } finally {\n            client.shutdown();\n        }\n    }\n}\n</code></pre>"},{"location":"java-hibernate-spring/","title":"Java / Spring / Hibernate","text":"<p>Wprowadzenie do ekosystemu Java i framework\u00f3w Spring oraz Hibernate.</p>"},{"location":"java-hibernate-spring/db/","title":"Databases","text":""},{"location":"java-hibernate-spring/db/notes1/","title":"Basic database operations/connections","text":""},{"location":"java-hibernate-spring/db/notes1/#instalacja-sterownika-mysql","title":"Instalacja sterownika MySQL","text":"<p>Wejd\u017a na repozytorium Maven i znajd\u017a odpowiedni\u0105 wersj\u0119 sterownika MySQL - nast\u0119pnie dodaj j\u0105 do pliku <code>build.gradle</code>. Przyk\u0142adowo: <pre><code>implementation(\"com.mysql:mysql-connector-j:9.2.0\")\n</code></pre></p> <p>W celu integracji z baz\u0105 danych, zdefiniuj URL: <code>\"jdbc:mysql://127.0.0.1:3306/university\"</code> i ustan\u00f3w po\u0142\u0105czenie: <pre><code>try (Connection connection = DriverManager.getConnection(CONN_STRING, \"USER\", \"PASSWORD\")) {\n    System.out.println(\"Connected to database\");\n} catch (SQLException e) {\n    throw new RuntimeException(e);\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/db/notes1/#wykonywanie-prostych-zapytan","title":"Wykonywanie prostych zapyta\u0144","text":"<p>Do stworzenia zapytania wykorzystujemy klas\u0119 <code>Statement statement = connection.newStatement()</code> - taki obiekt trzeba zamkn\u0105\u0107 na ko\u0144cu, dlatego warto umie\u015bci\u0107 go w <code>try-with-resources</code>. Wynik zapytania mo\u017cemy przypisa\u0107 do klasy <code>ResultSet resultSet = statement.executeQuery(query)</code>. Przyk\u0142adowo: <pre><code>ResultSetMetaData md = resultSet.getMetaData();\nfor (int a = 1; a &lt;= md.getColumnCount(); a++) {\n    System.out.println(md.getColumnName(a) + \": \" + md.getColumnTypeName(a));\n}\n\nwhile (resultSet.next()) {\n    int id = resultSet.getInt(\"id\");\n    String firstName = resultSet.getString(\"first_name\");\n    String lastName = resultSet.getString(\"last_name\");\n    System.out.println(id + \" \" + firstName + \" \" + lastName);\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/db/notes1/#inny-sposob-poaczenia-wiecej-kontroli","title":"Inny spos\u00f3b po\u0142\u0105czenia - wi\u0119cej kontroli","text":"<pre><code>MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setServerName(\"localhost\");\ndataSource.setDatabaseName(\"university\");\ndataSource.setPort(3306);\ndataSource.setContinueBatchOnError(false);\nConnection conn = dataSource.getConnection(\"USER\", \"PASSWORD\")\n</code></pre>"},{"location":"java-hibernate-spring/db/notes2/","title":"Hibernate","text":""},{"location":"java-hibernate-spring/db/notes2/#instalacja-zaleznosci","title":"Instalacja zale\u017cno\u015bci","text":"<p>Po stworzeniu projektu przez Mavena, nale\u017cy doda\u0107 zale\u017cno\u015b\u0107 Hibernate oraz sterownik np. PostgreSQL do pliku <code>pom.xml</code>: <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n        &lt;version&gt;42.7.4&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n        &lt;version&gt;7.0.0.Beta4&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> Nale\u017cy tak\u017ce stworzy\u0107 plik konfiguracyjny dla Hibernate w folderze <code>resources/hibernate.cfg.xml</code> - poda\u0107 URL bazy danych, u\u017cytkownika, has\u0142o i inne w\u0142a\u015bciwo\u015bci: <pre><code>&lt;hibernate-configuration xmlns=\"http://www.hibernate.org/xsd/orm/cfg\"&gt;\n    &lt;session-factory&gt;\n        &lt;property name=\"hibernate.connection.driver_class\"&gt;org.postgresql.Driver&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.url\"&gt;jdbc:postgresql://localhost:5432/DB_NAME&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.username\"&gt;postgres&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.password\"&gt;DB_PASSWORD&lt;/property&gt;\n\n        &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update/create&lt;/property&gt;\n        &lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt;\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre></p>"},{"location":"java-hibernate-spring/db/notes2/#inicjalizacja-poaczenia-i-sesji","title":"Inicjalizacja po\u0142\u0105czenia i sesji","text":"<p><pre><code>SessionFactory factory = new Configuration()\n        .addAnnotatedClass(com.example.CLASS_NAME.class)\n        .configure()\n        .buildSessionFactory();\n</code></pre> <pre><code>Transaction tx = null;\ntry (Session session = factory.openSession()) {\n    tx = session.beginTransaction();\n    session.persist(OBJECT);\n    tx.commit();\n} catch (org.hibernate.exception.ConstraintViolationException e) {\n    if (tx != null) tx.rollback();\n}\n</code></pre> W celu odpytania bazy, mo\u017cemy wykona\u0107: <pre><code>Object object = session.byId(Object.class).getReference(ID); // lazy fetching\nObject object = session.find(Object.class, ID); // eager fetching\n</code></pre></p> <p>Ostatecznie, nale\u017cy zamkn\u0105\u0107 sesj\u0119 i po\u0142\u0105czenie: <pre><code>session.close();\nfactory.close();\n</code></pre></p>"},{"location":"java-hibernate-spring/db/notes3/","title":"Transactions","text":""},{"location":"java-hibernate-spring/db/notes3/#informacje","title":"Informacje","text":"<p>Domy\u015blnie, <code>connection</code> wykonuje ka\u017cde zapytanie od razu, po kolei. W celu stworzenia transakcji nale\u017cy zmieni\u0107 t\u0119 domy\u015bln\u0105 opcj\u0119. Przyk\u0142adowo: <pre><code>conn.setAutoCommit(false)\ntry {\n    statement.executeUpdate(\"DELETE FROM students WHERE first_name='Dominik'\")\n    statement.executeUpdate(\"DELETE FROM university WHERE course_id = 1\")\n    conn.comit();\n} catch (SQLException e) {\n    conn.rollback()\n}\nconn.setAutoCommit(true)\n</code></pre> Zamiast wykonywa\u0107 wiele zapyta\u0144 do bazy, mo\u017cna je po\u0142\u0105czy\u0107 w jedno: <pre><code>statement.addBatch(queryA);\nstatement.addBatch(queryB);\nstatement.executeBatch();\n</code></pre> Trzeba uwa\u017ca\u0107, gdy\u017c wiele sterownik\u00f3w r\u00f3\u017cnie obs\u0142uguje zapytania batchowe. Gdy jakie\u015b zapytanie w \u015brodku, sko\u0144czy si\u0119 b\u0142\u0119dem, pozosta\u0142e nadal b\u0119d\u0105 wykonane - takie zachowanie w przypadku transakcji nie jest dobre. Aby to zmieni\u0107, podaj parametr w po\u0142\u0105czeniu: <code>jdbc:mysql://localhost:3306/students?continueBatchOnError=false</code></p>"},{"location":"java-hibernate-spring/db/notes3/#prepared-statements","title":"Prepared Statements","text":"<p>W celu unikni\u0119cia np. <code>SQL injection</code> warto tworzy\u0107 zparametryzowane zapytania do bazy danych. S\u0142u\u017cy do tego klasa <code>PreparedStatement</code>: <pre><code>String query = \"SELECT * FROM students WHERE id = ?\"\nPreparedStatement ps = conn.prepareStatement(query);\nps.setInt(1, 13141); // (index number in query, value to put)\nResultSet rs = ps.executeQuery();\n</code></pre></p>"},{"location":"java-hibernate-spring/db/notes4/","title":"H2 database","text":"<p>Plik <code>application.properties</code> zmie\u0144 na <code>application.yaml</code> - b\u0119dzie czytelniejszy. Oto konfiguracja lokalnej bazy danych H2:</p> <pre><code>server:\n  port: 8080\n\nspring:\n  datasource:\n    url: jdbc:h2:mem:testdb\n    driverClassName: org.h2.Driver\n    username: sa\n    password: ''\n  h2:\n    console:\n      enabled: true\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n</code></pre>"},{"location":"java-hibernate-spring/spring/","title":"Spring","text":""},{"location":"java-hibernate-spring/spring/4_spring_exceptions/","title":"Spring Exceptions","text":""},{"location":"java-hibernate-spring/spring/4_spring_exceptions/#obsugiwanie-wyjatkow","title":"Obs\u0142ugiwanie wyj\u0105tk\u00f3w","text":"<p>Tworzymy w\u0142asny wyj\u0105tek i w\u0142asn\u0105 klas\u0119 DTO, kt\u00f3ra b\u0119dzie przesy\u0142ana klientowi. Przyk\u0142adowo:</p> <pre><code>class StudentNotFoundException extends RunTimeException {}\n\nclass StudentErrorResponse {\n    int status;\n    String message;\n    Timestamp timestamp;\n}\n</code></pre> <p>W celu zarejestrowania obs\u0142ugi wyj\u0105tku tworzymy funkcj\u0119 z adnotacj\u0105 <code>@ExceptionHandler</code>: <pre><code>@ExceptionHandler\nResponseEntity&lt;StudentErrorResponse&gt; handleStudentNotFoundException(StudentNotFoundException ex) {\n    StudentErrorResponse error = new StudentErrorResponse()\n    error.setStatus(HttpStatus.NOT_FOUND.value());\n    ... \n    return new ResponseEntity&lt;&gt;(error, HttpStatus.NOT_FOUND);\n}\n</code></pre></p> <p>Funkcje handluj\u0105ce mo\u017cna dodawa\u0107 wewn\u0105trz kontroler\u00f3w - wtedy to jest ich zakres. </p>"},{"location":"java-hibernate-spring/spring/4_spring_exceptions/#globalna-obsuga-wyjatkow","title":"Globalna obs\u0142uga wyj\u0105tk\u00f3w","text":"<p>Gdy potrzebujemy obs\u0142ugiwa\u0107 b\u0142\u0105d dla wielu kontroler\u00f3w, mo\u017cemy stworzy\u0107 globaln\u0105 obs\u0142ug\u0119 wyj\u0105tku. Tak\u0105 funkcj\u0119 obs\u0142uguj\u0105c\u0105 umieszczamy wewn\u0105trz klasy, oznaczonej adnotacj\u0105 <code>ControllerAdvice</code>. Przyk\u0142adowo: <pre><code>@ControllerAdvice\npublic class StudentRestExceptionHandler {}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/4_spring_exceptions/#obsuga-bedow-przy-walidacji","title":"Obs\u0142uga b\u0142\u0119d\u00f3w przy walidacji","text":"<p>W przypadku u\u017cywania adnotacji np. <code>@NotBlank, @NotEmpty(message = ...), @Min</code>, je\u015bli zapytanie nie spe\u0142nia wymaga\u0144, zostanie rzucony b\u0142\u0105d: </p> <ol> <li><code>MethodArgumentNotValidException</code> - dla cia\u0142a \u017cadania z adnotacj\u0105 <code>@RequestBody</code></li> <li><code>ConstraintViolationException</code> - dla parametr\u00f3w z walidacj\u0105 na poziomie metod lub query params. </li> </ol> <p>Trzeba je przechwywi\u0107 w globalnym handlerze wyj\u0105tk\u00f3w. Przyk\u0142adowo: <pre><code>@ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleValidationExceptions(MethodArgumentNotValidException ex) {}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/5_spring_rest_data/","title":"Spring Exceptions","text":"<p>W celu uproszczenia pisania tego samego kodu w endpointach dla ka\u017cdego repozytorium, mo\u017cna skorzysta\u0107 z wtyczki <code>spring data rest</code>, kt\u00f3ra automatycznie, na podstawie danego repozytorium, wystawia endpointy. Domy\u015blnie robi to pod \u015bcie\u017ck\u0105 liczby mnogiej nazwy encji - przyk\u0142adowo maj\u0105\u0107 encj\u0119 <code>Employees</code>, endpointy b\u0119d\u0105 wystawione pod: <code>/employees/</code>. </p> <p>Je\u015bli chcemy zmieni\u0107 ten domy\u015blny URI, to dodajemy adnotacj\u0119 <code>@RepositoryRestResource(path = \"members\")</code>. Mo\u017cna tak\u017ce doda\u0107 bazowy przedrostek w URI, konfiguruje si\u0119 to ju\u017c w pliku <code>application.properties</code>: <code>spring.data.rest.base-path=api</code>. </p> <p>Wtyczka dodaje te\u017c wiele innych opcji, np. sortowanie po danym polu encji: <code>/employees?sort=lastName,desc</code>. </p>"},{"location":"java-hibernate-spring/spring/6_swagger/","title":"Swagger","text":""},{"location":"java-hibernate-spring/spring/6_swagger/#dokumentacja-api","title":"Dokumentacja API","text":"<p>Skorzystamy z biblioteki <code>OpenAPI</code>. Dodaj odpowiednie zale\u017cno\u015bci do pliku z dependencjami. Dokumentacja jest dost\u0119pna pod adresem: <code>localhost:8080/swagger-ui/index.html</code></p>"},{"location":"java-hibernate-spring/spring/6_swagger/#informacje-ogolne-o-aplikacji","title":"Informacje og\u00f3lne o aplikacji","text":"<p>W g\u0142\u00f3wnej klasie (w kt\u00f3rej zawarta jest metoda <code>main</code>) umieszczamy adnotacj\u0119: <pre><code>@OpenAPIDefinition(\n    info = @Info(\n        title = \"...\",\n        description = \"...\",\n        version = \"...\",\n        contact = @Contact(\n            name, email, url, ...\n        )\n    )\n)\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/6_swagger/#informacje-o-kontrolerze","title":"Informacje o kontrolerze","text":"<p>Nad klasa kontrolera dodajemy adnotacj\u0119: <pre><code>@Tag(\n    name = \"...\",\n    description = \"...\"\n)\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/6_swagger/#informacje-o-endpoincie","title":"Informacje o endpoincie","text":"<p>Nad funkcj\u0105 obs\u0142uguj\u0105c\u0105 dany endpoint dodajemy: <pre><code>@Operation(\n    summary = \"...\",\n    description = \"...\"\n)\n</code></pre></p> <p>Je\u015bli chcemy doda\u0107 informacje o zwracanych kodach to: <pre><code>@ApiResponse(\n    responseCode = \"201\",\n    description = \"...\"\n)\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/6_swagger/#inforamcje-o-dto","title":"Inforamcje o DTO","text":"<p>Mo\u017cemy doda\u0107 przyk\u0142ad wysy\u0142anych danych poprzez dodanie adnotacji do p\u00f3\u0142 DTO: <pre><code>@Schema(\n    description = \"...\",\n    example = \"...\"\n)\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_boot/","title":"Spring Boot","text":""},{"location":"java-hibernate-spring/spring/spring_boot/#auto-reload","title":"Auto-reload","text":"<p>W celu automatycznego prze\u0142adowywania aplikacji, po wykryciu zmian, dodaj zale\u017cno\u015b\u0107 do pliku <code>pom.xml</code>: <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_core/","title":"Spring Core","text":""},{"location":"java-hibernate-spring/spring/spring_core/#wstrzykiwanie-zalezosci-przez-konstruktor","title":"Wstrzykiwanie zale\u017co\u015bci przez konstruktor","text":"<p>W celu oznaczenia klasy, jako kandydata do wstrzykni\u0119cia, nale\u017cy oznaczy\u0107 go adnotacj\u0105 <code>@Component</code>. Przyk\u0142adowo: <pre><code>@Component \n@Lazy\npublic class MercedesMechanic implements Mechanic {\n    @Override \n    public String fixCar() {\n        return \"Fixing Mercedes\";\n    }\n}\n</code></pre> Adnotacja <code>@Lazy</code> powoduje, \u017ce obiekt jest inicjalizowany, dopiero, gdy jest potrzebny. </p> <p>Nast\u0119pnie, gdy potrzebujemy obiekt tej klasy w innej, tworzymy konstruktor i oznaczamy go adnotacj\u0105 <code>@Autowired</code>.  <pre><code>@Autowired \npublic DemoController(Mechanic mechanic)\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_core/#wstrzykiwanie-zaleznosci-przez-setter","title":"Wstrzykiwanie zale\u017cno\u015bci przez setter","text":"<p>To samo, ale wstrzykujemy przez settery: <pre><code>@Autowired\nvoid setMechanic(Mechanic mechanic) {\n    this.mechanic = mechanic;\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_core/#problem-niejednoznacznosci","title":"Problem niejednoznaczno\u015bci","text":""},{"location":"java-hibernate-spring/spring/spring_core/#adnotacja-qualifier","title":"Adnotacja <code>@Qualifier</code>","text":"<p>Co je\u015bli, mamy wi\u0119cej implementacji danego interfejsu? Kt\u00f3r\u0105 klas\u0119 wstrzykn\u0105\u0107? Mo\u017cemy by\u0107 dok\u0142adniejsi i napisa\u0107: <pre><code>@Autowired\nvoid setCoach(@Qualifier(\"mercedesMechanic\") Mechanic mechanic) {}\n</code></pre> Podany string to <code>beanID</code> - taki sam, jak nazwa klasy, ale z ma\u0142ej litery. </p>"},{"location":"java-hibernate-spring/spring/spring_core/#adnotacja-primary","title":"Adnotacja <code>@Primary</code>","text":"<p>Mo\u017cemy implementacj\u0119 danego interfejsu oznaczy\u0107 adnotacj\u0105 <code>Primary</code> - taka adnotacja mo\u017ce by\u0107 tyko jedna. Taka klasa b\u0119dzie domy\u015blnie wstrzykiwana, w przypadku braku jawnego okre\u015blenia innej. </p>"},{"location":"java-hibernate-spring/spring/spring_core/#bean-scope","title":"Bean Scope","text":"<p>Domy\u015blnie, Spring tworzy jedn\u0105 instacj\u0119 ka\u017cdego komponentu - Singleton. Mo\u017cemy to zmodyfikowa\u0107, np. aby przy ka\u017cdym wstrzykni\u0119ciu, tworzy\u0142 nowy obiekt. <pre><code>@Component\n@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) // only one instance\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // many instances\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_core/#postkonstruktor-i-dekonstruktor","title":"PostKonstruktor i Dekonstruktor","text":"<p>Po inicjalizacji Beana, mo\u017cemy wykona\u0107 jeszcze w\u0142asn\u0105 inicjalizacj\u0119, np. po\u0142\u0105czenie z baz\u0105 danych. Mo\u017cemy tak\u017ce, przed wy\u0142\u0105czeniem apliacji, takie po\u0142\u0105czenie zako\u0144czy\u0107.  <pre><code>@PostConstruct\npublic void init() {}\n\n@PreDestroy\npublic void destroy() {}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_core/#configuration-i-bean","title":"<code>@Configuration</code> i <code>@Bean</code>","text":"<p>Czasami cie\u017cko tworzy\u0107 klasy z adnotacj\u0105 <code>@Component</code>, gdy np. u\u017cywamy zewn\u0119trznych bibliotek. Mo\u017cemy stworzy\u0107 w\u0142asn\u0105 klas\u0119 konfiguracyjn\u0105, stworzy\u0107 metod\u0119 z adnotacj\u0105 <code>@Bean</code> i w tej metodzie zaimplementowa\u0107 funkcjonalno\u015bci, zwracaja\u0107 ostatecznie dany obiekt.  <pre><code>@Configuration\npublic class SportConfig {\n    @Bean\n    public Coach swimCoach() {\n        // dowolna konfiguracja, logika\n        return new SwimCoach();\n    }\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_hibernate/","title":"Hibernate","text":""},{"location":"java-hibernate-spring/spring/spring_hibernate/#wprowadzenie","title":"Wprowadzenie","text":"<p><code>Entity Manager</code> pozwala zarz\u0105dza\u0107 baz\u0105 danych - URL, u\u017cytkownik, has\u0142o definiujemy z pliku <code>application.properties</code>. Przyk\u0142adowo:  <pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/students\nspring.datasource.password=root\nspring.datasource.username=root\n</code></pre></p> <p><pre><code>@Repository\npublic class StudentDAO implements IStudentDAO {\n    EntityManager entityManager;\n\n    @Autowired\n    public StudentDAO(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    @Override\n    @Transactional\n    public void save(Student student) {\n        entityManager.persist(student);\n    }\n\n    @Override\n    public Student findById(Integer id) {\n        Student student = entityManager.find(Student.class, id);\n        System.out.println(student);\n        return student;\n    }\n}\n</code></pre> Wyja\u015bnienie adnotacji: - <code>Repository</code> oznacza klas\u0119 DAO, - <code>Transactional</code> oznacza, \u017ce zawarto\u015b\u0107 funkcji wykona si\u0119 w jednej transakcji,</p>"},{"location":"java-hibernate-spring/spring/spring_hibernate/#aktualizowanie-zawartosciwyszukiwanie","title":"Aktualizowanie zawarto\u015bci/wyszukiwanie","text":"<p>Wykonujemy:  <pre><code>TypedQuery&lt;Student&gt; query = entityManager.createQuery(\"FROM Student WHERE lastName='Doe'\", Student.class);\nquery.getResultList();\n</code></pre> <pre><code>query = entityManager.createQuery(\"FROM Student WHERE lastName=:theData\", Student.class);\nquery.setParameter(\"theData\", \"Kowalski\")\n\n// SELECT s FROM Student s WHERE s.firstName='Doe'\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_hibernate/#migracje","title":"Migracje","text":"<pre><code>spring.jpa.hibernate.ddl-auto= // update, create\n</code></pre>"},{"location":"java-hibernate-spring/spring/spring_hibernate/#jparepository-i-wasne-implementacje-dao","title":"JPARepository i w\u0142asne implementacje DAO","text":"<p>JPARepository u\u0142atwia i automatycznie generuje kod, do interakcji z baz\u0105 danych. Wystarczy implementowa\u0107 interfejs <code>JpaRepository</code>, podaja\u0107 encj\u0119 i typ klucza g\u0142\u00f3wnego.    </p> <p>Je\u015bli chcemy doda\u0107 w\u0142asne metody, tworzymy customowy interfejs, jego implementacj\u0119 i rozszerzamy bazowe repozytorium w\u0142asnie o ten interfejs. Przyk\u0142adowo: <pre><code>public interface UserRepositoryCustom {\n    void doSomethingCustom();\n}\n\npublic class UserRepositoryImpl implements UserRepositoryCustom {\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    @Override\n    public void doSomethingCustom() {\n        // Twoja implementacja z u\u017cyciem EntityManagera\n    }\n}\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt;, UserRepositoryCustom {\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring/spring_rest/","title":"REST","text":""},{"location":"java-hibernate-spring/spring/spring_rest/#wprowadzenie","title":"Wprowadzenie","text":"<ul> <li><code>@RestController</code> - oznaczenie klasy, jako endpointu REST</li> <li><code>@RestMapping(\"/v1\")</code> - okre\u015blenie prefixu URI danej klasy </li> <li><code>@GetMapping(\"/lecture\")</code> - okre\u015blenie funkcji handluj\u0105cej zapytania GET </li> </ul>"},{"location":"java-hibernate-spring/spring/spring_rest/#zmienne-w-uri","title":"Zmienne w URI","text":"<pre><code>@GetMapping(\"/students/{studentID}\")\npublic Student getStudent(@PathVariable int studentID) {}\n</code></pre>"},{"location":"java-hibernate-spring/spring/spring_rest/#wyjatki-bedy","title":"Wyj\u0105tki, b\u0142\u0119dy","text":"<p>W celu z\u0142apania i przes\u0142ania b\u0142\u0119du, jako odpowiedzi nale\u017cy:</p> <ul> <li>Zdefiniowa\u0107 w\u0142asn\u0105 klas\u0119 z odpowiedzi\u0105 (np. zawiera pola status code, message), wraz getterami, setterami </li> <li>Zdefiniowa\u0107 w\u0142asny wyj\u0105tek, np. <code>StudentNotFoundException</code> (dziedziczy po RuntimeException)</li> <li>Poinformowa\u0107 kontroler REST, by dany b\u0142\u0105d rozstrzyga\u0142 w okre\u015blony spos\u00f3b. </li> </ul> <p>Przyk\u0142ad: <pre><code>@ExceptionHandler\npublic ResponseEntity&lt;StudentErrorResponse&gt; handleException(StudentNotFoundException exc) {\n    StudentErrorResponse err = new ...;\n    err.setStatus(...);\n    err.setMessage(...);\n    return new ResponseEntity&lt;&gt;(err, HttpStatus.NOT_FOUND);\n}\n</code></pre></p>"},{"location":"java-hibernate-spring/spring-security/","title":"Spring security","text":""},{"location":"java-hibernate-spring/spring-security/1_spring_security/","title":"Spring Security Start","text":""},{"location":"java-hibernate-spring/spring-security/1_spring_security/#instalacja-dependencji","title":"Instalacja dependencji","text":"<p>Dodaj dependencj\u0119 <code>spring boot starter security</code>. Automatycznie, wszystkie endpointy s\u0105 zastrze\u017cone loginem i has\u0142em (has\u0142o podawane jest w konsoli). Mo\u017cna poda\u0107 w\u0142asne dane logowania w pliku <code>application.properties</code>: <pre><code>spring.security.user.name = chomik123\nspring.security.user.password = root123\n</code></pre></p>"},{"location":"java-hibernate-spring/spring-security/1_spring_security/#tworzenie-podstawowych-rol-w-pamieci","title":"Tworzenie podstawowych r\u00f3l w pami\u0119ci","text":"<p>W pliku konfiguracyjnym dodajemy: <pre><code>@Bean\npublic InMemoryUserDetailsManager userDetailsManager() {\n    UserDetails john = User.builder()\n            .username(\"john\")\n            .password(\"{noop}test123\")\n            .roles(\"EMPLOYEE\")\n            .build();\n    UserDetails mary = User.builder()\n            .username(\"mary\")\n            .password(\"{noop}test123\")\n            .roles(\"EMPLOYEE\", \"MANAGER\")\n            .build();\n    UserDetails susan = User.builder()\n            .username(\"susan\")\n            .password(\"{noop}test123\")\n            .roles(\"EMPLOYEE\", \"MANAGER\", \"ADMIN\")\n            .build();\n\n    return new InMemoryUserDetailsManager(john, mary, susan);\n}\n</code></pre> W celu wys\u0142ania zapytania w <code>Postman</code>, dodajemy pola w <code>Basic auth</code>. </p>"},{"location":"java-hibernate-spring/spring-security/1_spring_security/#ochrona-api-na-podstawie-rol","title":"Ochrona API na podstawie r\u00f3l","text":"<pre><code>@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http.authorizeHttpRequests(configurer -&gt; {\n        configurer\n                .requestMatchers(HttpMethod.GET, \"/api/employees\").hasRole(\"EMPLOYEE\")\n                .requestMatchers(HttpMethod.GET, \"/api/employees/**\").hasRole(\"EMPLOYEE\")\n                .requestMatchers(HttpMethod.POST, \"/api/employees\").hasRole(\"MANAGER\")\n                .requestMatchers(HttpMethod.PUT, \"/api/employees\").hasRole(\"MANAGER\")\n                .requestMatchers(HttpMethod.DELETE, \"/api/employees/**\").hasRole(\"ADMIN\");\n                // hasAnyRole, \n    });\n\n    http.httpBasic(Customizer.withDefaults());\n    http.csrf(AbstractHttpConfigurer::disable);\n\n    return http.build();\n}\n</code></pre>"},{"location":"network/","title":"Opis, wyt\u0142umaczenie protoko\u0142\u00f3w sieciowych","text":"<p>Opis i wyja\u015bnienie protoko\u0142u RIPv1v2: RIP v1v2</p> <p>Opis i wyja\u015bnienie protoko\u0142u IGRP/EIGRP: IGRP/EIGRP</p> <p>Opis i wyja\u015bnienie protoko\u0142u OSPF: OSPF</p> <p>Opis i wyja\u015bnienie protoko\u0142\u00f3w TCP/UDP: TCP/UDP</p> <p>Opis i wyja\u015bnienie IPv6: IPv6</p>"},{"location":"network/bsk/notes1/","title":"Firewall/zapory ogniowe","text":""},{"location":"network/bsk/notes1/#wzorzec-dziaania-zapor-ogniowych","title":"Wzorzec dzia\u0142ania zapor ogniowych:","text":"<ul> <li>domy\u015blne przepuszczanie, </li> <li>domy\u015blne odrzucanie </li> </ul>"},{"location":"network/bsk/notes1/#urzadzenia-idsips","title":"Urz\u0105dzenia IDS/IPS","text":"<ul> <li>IDS - Intrusion Detection System - wykrywa i raportuje  </li> <li>IPS - Inttrustion Protection System - wykrywa i reaguje </li> </ul>"},{"location":"network/bsk/notes1/#listy-acl-access-control-lists","title":"Listy ACL (Access Control Lists)","text":"<p>Najprostsze klasyfikatory (standard) klasyfikuj\u0105 jedynie na podstawie adresu \u017ar\u00f3d\u0142owego. S\u0105 tak\u017ce rozszerzone (extended), kt\u00f3re klasyfikuj\u0105 na podstawie:  - adres\u00f3w \u017ar\u00f3d\u0142owych i docelowych  - informacji dodatkowej: numer\u00f3w port\u00f3w TCP, UDP, pakietach ICMP, flag TCP itd.</p> <p>Pakiety przechodz\u0105 sekwencyjnie przez list\u0119 dost\u0119pu - dlatego na pocz\u0105tku listy s\u0105 wpisy najbardziej szczeg\u00f3\u0142owe. </p> <p>Tworzenie firewalla przebiega dwuetapowo:  1. Definiowanie listy o konkretnym numerze (okre\u015blaj\u0105cym jej rodzaj):   <pre><code>access-list NUMER permit|deny ADRES_\u0179R\u00d3D\u0141OWY WILDCARD\n</code></pre> 2. Przypisanie list konkretnym interfejsom: <pre><code>ip access-group NUMER in|out\n</code></pre></p> <p>Aby wy\u015bwietli\u0107 utworzone listy wywo\u0142aj: <code>show access-lists</code></p>"},{"location":"network/bsk/notes1/#dziaanie-odwroconych-masek-wildcard","title":"Dzia\u0142anie odwr\u00f3conych masek (wildcard)","text":"<p>Dzia\u0142aj\u0105 analogicznie do zwyk\u0142ych  masek adresu, lecz wykonuj\u0105 operacj\u0119 OR (zamiast operacji AND). W efekcie: - 0 - sprawd\u017a odpowiedni bit  - 1 - bit nieistotny </p> <p>Przyk\u0142ad: W li\u015bcie dost\u0119pu mamy wpis: <code>10.131.10.40 0.0.255.0 deny</code>. Przychodzi pakiet z adresem \u017ar\u00f3d\u0142owym <code>10.131.51.40</code>. Przyk\u0142adaj\u0105c mask\u0119 do adresu w li\u015bcie dostajemy: <code>10.131.255.40</code>, robi\u0105c to samo dla kolejnego adresu: <code>10.131.255.40</code>. Dostali\u015bmy to samo, czyli adres dopasowa\u0142 si\u0119 do wpisu w li\u015bcie - zostanie odrzucony.  </p>"},{"location":"network/bsk/notes1/#rozszerzone-listy-dostepu","title":"Rozszerzone listy dost\u0119pu","text":"<p>Typy list dost\u0119pu rozr\u00f3\u017cniane s\u0105 przez ich numer. Przyk\u0142adowo: - 1-99 standard IP - 100-199 extended IP </p>"},{"location":"network/bsk/notes2/","title":"Prywatne VLANy","text":"<p>Sieci tego samego typu nale\u017cy budowa\u0107 na switchach nale\u017c\u0105cych do tej samej 'klasy zaufania' - sieci zaufane \u0142\u0105czymy na 'zaufanym' switchu  - sieci strefy DMZ \u0142\u0105czymy na switchu DMZ, - sieci niezaufane na 'niezaufanym' switchu </p>"},{"location":"network/bsk/notes2/#ewolucja-rozwiazan","title":"Ewolucja rozwi\u0105za\u0144:","text":"<ul> <li>protected port (private VLAN edge) - port nalezy do VLAN, ale nie mo\u017ce komunikowa\u0107 si\u0119 z innym zabezpieczonym portem brzegowym  </li> <li>private VLAN - wewn\u0105trz podstawowej sieci VLAN (primary) definiujemy pod-VLANy: isolated (jeden), community (mo\u017ce by\u0107 wiele). Porty promiscuous - jawne, dost\u0119pne porty (ka\u017cdy mo\u017ce si\u0119 z nimi komunikowa\u0107) </li> </ul> <p>W prywatnych VLANach wszystkie hosty nale\u017c\u0105 do tej samej podsieci IP.</p> <ul> <li>Primary VLAN \u2013 g\u0142\u00f3wny VLAN</li> <li>Isolated VLAN \u2013 porty, kt\u00f3re nie mog\u0105 si\u0119 komunikowa\u0107 z nikim, tylko z promiscuous portem</li> <li>Community VLAN \u2013 porty mog\u0105 rozmawia\u0107 mi\u0119dzy sob\u0105 i z promiscuous portem</li> </ul> <p>Promiscuous port \u2013 mo\u017ce rozmawia\u0107 ze wszystkimi (np. router, firewall)</p>"},{"location":"network/bsk/notes2/#hot-standby-routing-protocol-hsrp","title":"Hot Standby Routing Protocol (HSRP)","text":"<p>Jest to tzw. wirtualny router z wirtualnym adresem MAC. W przypadku awarii jednego routera, drugi router przejmuje t\u0105 wirtualn\u0105 adresacj\u0119. Musi tak\u017ce powiadomi\u0107 switche, aby te zaaktualizowa\u0142y swoje tablice FDB (gratuitous ARP). </p> <p>Dzia\u0142anie:</p> <ol> <li>Routery do\u0142\u0105czaj\u0105 do wsp\u00f3lnej grupy HSRP</li> <li>Konfiguruj\u0105 wsp\u00f3lne wirtualne IP, kt\u00f3re b\u0119dzie bram\u0105 domy\u015bln\u0105 dla host\u00f3w. Jest te\u017c wirtualny MAC. </li> <li>Jeden zostaje <code>Active Router</code>, drugi to <code>Standby Router</code>. </li> </ol> <p><code>https://netadminpro.pl/konfiguracja-protokolu-hsrp/</code></p> <p><pre><code>R(config-if) #standby 50 ip 10.1.1.1 // udawaj router o danym ip\nR(config-if) #standby 50 priority 95 \nR(config-if) #standby 50 preempt // mo\u017cliwo\u015b\u0107 wyw\u0142aszczenia \nR(config-if) #standby 50 timers 3 10 // co 3 sek., wa\u017cno\u015b\u0107 10 sek.\nR(config-if) #standby 50 track f0/1 10 \n\nR#show standby [brief]\nR#debug standby \n</code></pre> Nale\u017cy wy\u0142\u0105czy\u0107 ICMP Redirect </p> <p></p>"},{"location":"network/bsk/notes3/","title":"GLBP - Gateway Load Balancing Protocol","text":"<p>Zapewnia redundacj\u0119 bramy (jak HSRP), ale tak\u017ce r\u00f3wnowa\u017cy obci\u0105\u017cenie mi\u0119dzy wieloma routerami brzegowymi. W tym protokole, wszystkie routery aktywnie przekazuj\u0105 ruch. </p>"},{"location":"network/bsk/notes3/#podstawy-dziaania","title":"Podstawy dzia\u0142ania","text":"<p>Wszystkie routery maj\u0105 GLBP dziel\u0105 ten sam wirtualny adres IP, ale ka\u017cdy z osobna ma w\u0142asny wirtualny adres MAC. Router odpowiada za przesy\u0142 pakiet\u00f3w z podgrupy urz\u0105dze\u0144 w danej sieci. </p>"},{"location":"network/bsk/notes3/#etapy-dziaania-glbp","title":"Etapy dzia\u0142ania GLBP","text":"<ol> <li>Wybranie AVG (active virtual gateway)</li> <li>Przypisanie wielu wirtualnych adres\u00f3w MAC cz\u0142onkom grupy. AVG - active virtual forwarder </li> <li>AVG odpowiada na zapytania ARP od kient\u00f3w r\u00f3\u017cnymi adresami MAC przypisanymi AVF-om </li> <li>AVG obs\u0142uguj\u0105 ruch kierowany do wirtualnego routera na r\u00f3\u017cne adresy MAC</li> </ol> <pre><code>interface GigabitEthernet0/0\n ip address 192.168.1.2 255.255.255.0\n glbp 1 ip 192.168.1.1\n glbp 1 priority 110\n glbp 1 preempt\n glbp 1 load-balancing round-robin\n</code></pre>"},{"location":"network/bsk/notes4/","title":"Remote access","text":""},{"location":"network/bsk/notes4/#telnet-protoko-zdalnego-dostepu-bez-zadnego-szyfrowania","title":"Telnet - protok\u00f3\u0142 zdalnego dost\u0119pu bez \u017cadnego szyfrowania","text":"<pre><code># maksymalnie 5 po\u0142\u0105cze\u0144 (line - linia  komunikacyjna, vty - virtual terminal)\nline vty 0 4 \n    transport input telnet # protok\u00f3\u0142 dost\u0119pu: telnet \n    login local # szukaj u\u017cytkownika w lokalne DB \n\nusername root password root # tworzy nowego u\u017cytkownika \nenable secret root # do konfiguracji routera wymagane has\u0142o (root)\n</code></pre>"},{"location":"network/bsk/notes4/#ssh-protoko-zdalnego-dostepu-z-szyfrowaniem","title":"SSH - protok\u00f3\u0142 zdalnego dost\u0119pu z szyfrowaniem","text":"<pre><code>ip domain-name bsk.agh\nline vty 0 4 \n    transport input ssh \n    login local\n\nusername root password root \nenable secret root \n\n# crypto key zeroize rsa \ncrypto key generate rsa modulus 2048 general-keys\n</code></pre>"},{"location":"network/bsk/notes5/","title":"Other","text":""},{"location":"network/bsk/notes5/#port-security","title":"Port-security","text":"<pre><code>Switch(config)# interface fastEthernet 0/1  \nSwitch(config-if)# switchport mode access           # Ustawia port jako access  \nSwitch(config-if)# switchport port-security         # W\u0142\u0105cza Port Security  \nSwitch(config-if)# switchport port-security maximum 2 # Maks. 2 adresy MAC  \nSwitch(config-if)# switchport port-security violation restrict # Reakcja: restrict  \nSwitch(config-if)# switchport port-security mac-address sticky # Zapisze MAC w konfiguracji \n</code></pre>"},{"location":"network/bsk/notes5/#bpdu-guard","title":"BPDU Guard","text":"<pre><code>Switch(config)# interface fastEthernet 0/1  \nSwitch(config-if)# spanning-tree bpduguard enable  \n</code></pre> <pre><code># Ustawienie portu jako Portfast \nSwitch(config)# interface fastEthernet 0/1  \nSwitch(config-if)# spanning-tree portfast  \n\n\n# Globalne uruchomienie BPDU Guard dla port\u00f3w Portfast \nSwitch(config)# spanning-tree portfast bpduguard default  \n</code></pre>"},{"location":"network/bsk/notes5/#zbf","title":"ZBF","text":"<pre><code>Router(config)# zone security INSIDE\nRouter(config)# zone security OUTSIDE\n\nRouter(config)# interface GigabitEthernet0/0\nRouter(config-if)# zone-member security INSIDE\nRouter(config)# interface GigabitEthernet0/1\nRouter(config-if)# zone-member security OUTSIDE\n\nRouter(config)# ip access-list extended ALLOW_HTTP\nRouter(config-ext-nacl)# permit tcp any any eq 8\nRouter(config)# class-map type inspect CUSTOM_TRAFFIC\nRouter(config-cmap)# match access-group name ALLOW_HTTP  # U\u017cycie w\u0142asnego ACL!\n\nRouter(config)# policy-map type inspect INSIDE_TO_OUTSIDE\nRouter(config-pmap)# class type inspect CUSTOM_TRAFFIC\nRouter(config-pmap-c)# inspect  # Inspekcja stanowa (jak stateful firewall)\nRouter(config-pmap-c)# exit\nRouter(config-pmap)# class class-default  # Domy\u015blna klasa (ca\u0142a reszta ruchu)\nRouter(config-pmap-c)# drop  # Blokuj niepasuj\u0105cy ruch\n\nRouter(config)# zone-pair security INSIDE-OUTSIDE source INSIDE destination OUTSIDE\nRouter(config-sec-zone-pair)# service-policy type inspect INSIDE_TO_OUTSIDE\n</code></pre>"},{"location":"network/bsk/notes5/#access-listy","title":"Access-listy","text":"<pre><code># Lista numerowana \naccess-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 80\naccess-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 443\naccess-list 110 deny   ip 192.168.1.5 any\naccess-list 110 permit ip any any\n\n# Lista nazwana \nip access-list extended WEB_ACCESS\n permit tcp 10.0.0.0 0.255.255.255 any eq www\n permit tcp 10.0.0.0 0.255.255.255 any eq 443\n deny   tcp host 10.1.1.100 any\n permit ip any any\n\n\naccess-list 10 permit 192.168.1.0 0.0.0.255\naccess-list 10 deny   192.168.2.1\naccess-list 10 permit any\n\n\n# Filtr przepuszczaj\u0105cy ruch telnet i ssh do routera R2\n# oraz ca\u0142y ruch IP do innych urz\u0105dze\u0144 (na wej\u015bciu z LAN2)\nip access-list extended F2\n ! Zezw\u00f3l na ruch SSH (port 22) do routera R2\n permit tcp 192.168.2.0 0.0.0.255 host 192.168.2.1 eq 22\n ! Zezw\u00f3l na ruch Telnet (port 23) do routera R2\n permit tcp 192.168.2.0 0.0.0.255 host 192.168.2.1 eq 23\n ! Zablokuj pozosta\u0142y ruch do samego routera R2\n deny   ip any host 192.168.2.1\n ! Zezw\u00f3l na ca\u0142y ruch IP do innych urz\u0105dze\u0144\n permit ip 192.168.2.0 0.0.0.255 any\n</code></pre>"},{"location":"rust/","title":"Rust","text":""},{"location":"rust/basics/notes1/","title":"Zasady posiadania","text":"<ul> <li>Ka\u017cda warto\u015b\u0107 w Rust ma zmienn\u0105, kt\u00f3ra jest nazywana jej w\u0142a\u015bcicielem (owner)</li> <li>W\u0142a\u015bciciel mo\u017ce by\u0107 tylko jeden w danym momencie </li> <li>Gdy w\u0142a\u015bciciel wyjdzie poza zakres, warto\u015b\u0107 zostanie usuni\u0119ta </li> </ul>"},{"location":"rust/basics/notes1/#przenoszenie-wasnosci","title":"Przenoszenie w\u0142asno\u015bci","text":"<p>W\u0142asno\u015b\u0107 mo\u017cna przenie\u015b\u0107 podczas:</p> <ul> <li>przypisania warto\u015bci (assignment)</li> <li>przekazania warto\u015bci, jako parametr funkcji </li> <li>zwr\u00f3cenia warto\u015bci, jako wynik funkcji </li> </ul> Przyk\u0142ady przenoszenia w\u0142asno\u015bci<pre><code>fn main() {\n    let s1 = String::from(\"Hello Rust\");\n    let s2 = s1;  // move ownership from s1 to s2\n    println!(\"{}\", s1); // doesn't work! (s1 is not an owner)\n}\n\nfn main() {\n    let s1 = String::from(\"Let's...\");\n    process_text(s1); // s1 is moved to the function\n    println!(\"{s1}\") // cannot use s1 here anymore \n}\n</code></pre>"},{"location":"rust/basics/notes1/#pozyczanie-borrowing","title":"Po\u017cyczanie (borrowing)","text":"<p>Tworzymy now\u0105 zmienn\u0105, kt\u00f3ra wskazuje na w\u0142a\u015bciciela warto\u015bci. </p> Przyk\u0142ad po\u017cyczki<pre><code>let s1 = String::from(\"hello\");\nlet s2 = &amp;s1;\n</code></pre>"},{"location":"rust/basics/notes1/#odwoania-mutowalne","title":"Odwo\u0142ania mutowalne","text":"<p>Po\u017cyczanie mutowalnej zmiennej - mo\u017cemy j\u0105 wtedy edytowa\u0107/zmienia\u0107:</p> <pre><code>fn main() {\n    let mut s1 = String::from(\"Hello, \");\n    change(&amp;mut s1);\n}\nfn change(s : &amp;mut String) {\n    s.push_str(\"world!\");\n}\n</code></pre>"},{"location":"rust/basics/notes1/#zasady-pozyczania","title":"Zasady po\u017cyczania","text":"<p>W dowolnym momencie mo\u017cemy mie\u0107 tylko jedn\u0105 z poni\u017cszych sytuacji:</p> <ul> <li>Dowoln\u0105 liczb\u0119 niemutowalnych referencji (do jednej warto\u015bci)</li> <li>Jedn\u0105 mutowaln\u0105 referencj\u0119 (do danej warto\u015bci)</li> </ul> <p>Nie mo\u017cemy mie\u0107 jednocze\u015bnie referencji mutowalnej i niemutowalnej, ani wielu referencji mutowalnych. </p> <p>Uwaga</p> <p>Je\u015bli dana struktura implementuje interfejs <code>Copy</code> to mimo, \u017ce przekazujemy j\u0105 np. do funkcji (bez po\u017cyczki), to nie nast\u0119puje przeniesienie w\u0142asno\u015bci.</p>"},{"location":"rust/basics/notes2/","title":"Programowanie obiektowe","text":""},{"location":"rust/basics/notes2/#definiowanie-struktur","title":"Definiowanie struktur","text":"Przyk\u0142ady prostego definiowania struktur<pre><code>struct Color; \nstruct Point(u32, u32, u32); \n</code></pre> Przyk\u0142ad definicji z\u0142o\u017conej struktury<pre><code>#[derive(Debug)] // allows to print instance\nstruct Spaceship {\n    name : String,\n    x : f32, \n    y : f32, \n    direction : f32,\n    speed : i32\n};\n\nlet ship = Spaceship {\n    name: \"Avalanche\".to_string(),\n    x : 4.0,\n    y : 4.0,\n    direction : 45.0,\n    speed: 10 \n};\n\n// let mut ship = Spaceship {...}; \n</code></pre>"},{"location":"rust/basics/notes2/#definiowanie-metod-dla-struktur","title":"Definiowanie metod dla struktur","text":"<p>Metody definiuje si\u0119 w bloku <code>impl</code>: <pre><code>impl Spaceship {\n    fn who_am_i(&amp;self) -&gt; &amp;str { // borrow value \n        self.name.as_str()\n    }\n\n    fn destroy(self) { // move value \n        println(\"Spaceship {} destroyed\", &amp;self.name)\n    }\n}\n</code></pre></p> <p>Metody bez argumentu <code>self</code>, okre\u015blane s\u0105 jako statyczne (nie instancyjne): <pre><code>impl Spaceship {\n    fn spawn(name : String) -&gt; Spaceship {\n        ...\n    }\n}\n\nlet ship = Spaceship::spawn(\"Destroyer\".to_string());\n</code></pre></p> <p>Kopiowanie struktur</p> <p>Mo\u017cliwe jest tworzenie innej instacji struktury, na podstawie aktualnej. Przyk\u0142adowo: <pre><code>let r2 = Rectangle {x: 3.0, ..r1};\n</code></pre> gdzie <code>r1</code> to tak\u017ce struktura <code>Rectangle</code>.</p> <p>W przypadku typ\u00f3w, kt\u00f3re implementuj\u0105 cech\u0119 <code>Copy</code>, warto\u015b\u0107 jest kopiowana, ale np. dla <code>String</code>, mamy do czynienia z przeniesieniem w\u0142asno\u015bci. </p>"},{"location":"rust/basics/notes2/#cechy-traits","title":"Cechy (traits)","text":"<p>Cechy to takie interfejsy. Dodaj\u0105 warstw\u0119 abstrakcji nad strukturami. Tworzenie i implementacja wygl\u0105da nast\u0119puj\u0105co:</p> <pre><code>trait PositionedElement {\n    fn pos(&amp;self) -&gt; (f32, f32)\n}\n\nimpl PositionedElement for Spaceship {\n    fn pos(&amp;self) -&gt; (f32, f32) {\n        (self.x, self.y)\n    }\n\n    fn is_collided(&amp;self, other : &amp;impl PositionedElement) -&gt; bool {\n        // it is possible to have a default implementation\n        ...\n    }\n}\n</code></pre>"},{"location":"rust/basics/notes3/","title":"Generics/Pointers","text":""},{"location":"rust/basics/notes3/#type-generyczne","title":"Type generyczne","text":""},{"location":"rust/basics/notes3/#obiekty-cech","title":"Obiekty cech","text":"<p>Powiedzmy, \u017ce mamy interfejs o nazwie <code>GameElement</code> z metod\u0105 <code>process()</code>. Nie jest mo\u017cliwe stworzenie wektora <code>Vec&lt;GameElement&gt;</code>, poniewa\u017c nie jest znany rozmiar typ\u00f3w, implementuj\u0105cych tego trait'a. </p> <p>W celu obej\u015bcia, stosuje si\u0119 inteligentne wska\u017aniki: <pre><code>Vec&lt;Box&lt;dyn GameElement&gt;&gt; = vec!();\n</code></pre></p>"},{"location":"rust/basics/notes4/","title":"Czas \u017cycia","text":""},{"location":"rust/basics/notes4/#czas-zycia-parametrow-funkcji","title":"Czas \u017cycia parametr\u00f3w funkcji","text":"<p>Kiedy funkcja zwraca po\u017cyczk\u0119, to nie wiemy, czyja i kogo jest to po\u017cyczka. Musimy wprowadzi\u0107 pewne ograniczenia na czas \u017cycia tej po\u017cyczki. Przyk\u0142adowo: po\u017cyczka ma \u017cy\u0107 tak d\u0142ugo, jak najkr\u00f3tszy czas \u017cycia parametr\u00f3w funkcji. </p> <pre><code>fn longer_array&lt;'a&gt;(a : &amp;'a[i32], b : &amp;'a[i32]) -&gt; &amp;'a[i32] {\n    if a.len() &gt; b.len() {\n        a\n    } else {\n        b\n    }\n}\n\n// je\u015bli a lub b odda w\u0142asno\u015b\u0107, po\u017cyczka przestanie by\u0107 poprawna. \n</code></pre>"},{"location":"rust/basics/notes5/","title":"Enumy","text":"<p>Enumy s\u0105 bardzo pot\u0119\u017cne. Ka\u017cde pole w enumie zachowuje si\u0119 jak struktura - mo\u017ce zawiera\u0107 w sobie te\u017c inne enumy, czy struktury. Dla enum\u00f3w mo\u017cna te\u017c definiowa\u0107 funkcje w bloku <code>impl</code>. </p> <p>Oto przyk\u0142adowe tworzenie z\u0142o\u017conych enum\u00f3w:</p> <pre><code>struct Button {\n    color : String,\n    background_color : String,\n    border_radius : i8,\n}\n\nenum Direction {\n    UP, DOWN, LEFT, RIGHT \n}\n\nenum UIEvent {\n    ButtonClicked(Button), Scroll(Direction), KeyPressed(char)\n}\n\nfn main() {\n    let clicked = UIEvent::ButtonClicked(Button{\n        color: \"red\".to_string(),\n        background_color: \"white\".to_string(),\n        border_radius: 15,\n    });\n\n    let scroll = UIEvent::Scroll(Direction::UP);\n}\n</code></pre>"},{"location":"rust/basics/notes6/","title":"Error handling","text":""},{"location":"rust/basics/notes6/#obsuga-bedow","title":"Obs\u0142uga b\u0142\u0119d\u00f3w","text":"<p>Mamy dwa rodzaje b\u0142\u0119d\u00f3w: b\u0142\u0119dy nienaprawialne i b\u0142\u0119dy do obs\u0142u\u017cenia. </p> <p>W celu natychmiastowego zako\u0144czenia programu b\u0142\u0119dem, wykorzystujemy makro <code>panic!()</code>. Przyk\u0142adowo: <pre><code>fn test_panic() {\n    panic!(\"cannot connect to database\");\n}\n</code></pre></p>"},{"location":"rust/basics/notes6/#bedy-do-obsuzenia","title":"B\u0142\u0119dy do obs\u0142u\u017cenia","text":"<p>Druga kategoria to b\u0142\u0119dy do obs\u0142u\u017cenia. W Rust nie ma wyj\u0105tk\u00f3w i blok\u00f3w <code>try/catch</code>, gdy\u017c takie rozwi\u0105zanie jest wolne - tworzy alternatywn\u0105 \u015bcie\u017ck\u0119 programu. Lepiej, po prostu, zwraca\u0107 mo\u017cliwy b\u0142\u0105d, jako rezultat wywo\u0142ania funkcji. Zosta\u0142 stworzony <code>enum</code>: <pre><code>enum Result&lt;T, E&gt; {\n    Ok(T),\n    Err(E)\n}\n</code></pre></p> <p>Po wywo\u0142aniu takiej funkcji mo\u017cemy rozpakowa\u0107 warto\u015b\u0107 na kilka sposob\u00f3w. Przyk\u0142adowo: <pre><code>let result = Rectangle::new(1.0, -1.0);\nlet rectangle = match result {\n    Ok(rec) =&gt; rec,\n    Err(msg) =&gt; {\n        println!(\"{}\", msg);\n        Rectangle {width: 1.0, height: 1.0}\n    }\n};\n</code></pre></p> <p>Innym sposobem jest skorzystanie z funkcji na strukturze <code>Result</code>: <pre><code>result.unwrap()\nresult.expect(\"...\")\nresult.unwrap_or_else(|_| Rectangle {...})\nresult.unwrap_or_default(); // T must implement Default trait\n</code></pre></p>"},{"location":"rust/basics/notes6/#modyfikacje","title":"Modyfikacje","text":"<p>Je\u015bli funkcja, kt\u00f3r\u0105 wywo\u0142uj\u0119 w innej funkcji tak\u017ce zwraca enuma <code>Result</code>, to nie musz\u0119 go rozpakowywa\u0107 i zwraca\u0107 b\u0142\u0119du, lecz wykorzysta\u0107 gotowy mechanizm. </p> <pre><code>fn bigger(...) -&gt; Result&lt;Rectangle, String&gt; {\n    let r = Rectangle::new(1.0, -1.0)?; \n}\n\n// Using ? is equal to writing the code below: \nlet r = match r {\n    Ok(r) =&gt; r,\n    Err(e) =&gt; return Err(e) \n};\n</code></pre>"},{"location":"rust/basics/notes7/","title":"Collections","text":""},{"location":"scala/","title":"Scala","text":""},{"location":"scala/advanced/notes1/","title":"Syntax sugar","text":""},{"location":"scala/advanced/notes1/#methods-with-one-argument","title":"Methods with one argument","text":"<p>Do metod/funkcji, kt\u00f3re przyjmuj\u0105 jeden argument, mo\u017cna wstawi\u0107 ca\u0142y blok kodu (ostatnia warto\u015b\u0107 to b\u0119dzie przekazany argument). Robi si\u0119 to nast\u0119puj\u0105co:</p> <pre><code>val aResult = singleArgMethod({\n    // long code \n    42 \n})\n</code></pre> <p>Jest tu troszk\u0119 du\u017co nawias\u00f3w, dlatego mo\u017cna to upro\u015bci\u0107 nast\u0119puj\u0105co: <pre><code>val aResult = singleArgMethod {\n    // long code \n    42 \n}\n</code></pre></p>"},{"location":"scala/advanced/notes1/#single-abstract-method-pattern","title":"Single abstract method pattern","text":"<p>Interfejsy, kt\u00f3re posiadaj\u0105 tylko jedn\u0105 metod\u0105 bez implementacji, daj\u0105 si\u0119 \u0142atwo implementowa\u0107, w stylu podobnym do deklaracji funkcji anonimowych. </p> <p>Przyk\u0142adowo, stw\u00f3rzmy w\u0105tek, kt\u00f3ry implementuje interfejs <code>Runnable</code> z jedn\u0105 metod\u0105 <code>run</code>:</p> <pre><code>// ugly code\nval aThread = new Thread(new Runnable {\n    override def run(): Unit = println(\"...\")\n})\n\n// elegant and transparent code\nval bThread = new Thread(() =&gt; println(\"...\"))\n</code></pre>"},{"location":"scala/advanced/notes1/#methods-ending-in-a","title":"Methods ending in a <code>:</code>","text":"<p>Metody (klas/interfejs\u00f3w), kt\u00f3re nie zawieraj\u0105 znak\u00f3w alfanumerycznych i ko\u0144cz\u0105 si\u0119 na <code>:</code> s\u0105 right-associative. Przyk\u0142adem jest wyra\u017cenie np. <code>1 :: 2 :: 3 :: List(4)</code> - kt\u00f3re na li\u015bcie wykonuje: <code>List(4).::3.::2.::1</code>. </p>"},{"location":"scala/advanced/notes1/#multi-word-identifiers","title":"Multi word identifiers","text":"<p>Nazwy funkcji, p\u00f3l, klas, obiekt\u00f3w mog\u0105 sk\u0142ada\u0107 si\u0119 z wielu s\u0142\u00f3w (lecz musz\u0105 by\u0107 zawarte w backtickach). Przyk\u0142adowo:</p> <pre><code>def `and then said`() = println(\"...\")\n\nobject `Content-Type` {\n    val `application/json` = \"application/JSON\"\n}\n</code></pre>"},{"location":"scala/advanced/notes1/#variable-arguments","title":"Variable arguments","text":"<pre><code>def methodWithVarargs(args: Int*) = { }\n\nmethodWithVarargs(1)\nmethodWithVarargs(1,2)\nmethodWithVarargs(1,3,4,5)\n\nval aCollection = List(1,2,3,4)\nmethodWithVarargs(aCollection*)\n</code></pre>"},{"location":"scala/advanced/notes2/","title":"Pattern Matching","text":""},{"location":"scala/advanced/notes2/#pattern-matching-apply-unapply","title":"Pattern matching (apply, unapply)","text":"<p>LEK. 4</p> <p>Nadpisanie metody <code>apply</code> w obiekcie towarzysz\u0105cym </p> <pre><code>object Person {\n    def apply(name: String, age: Int) = new Person(name, age)\n    def apply(age: Int) = new Person(\"Karol\", age)\n}\n</code></pre>"},{"location":"scala/advanced/notes2/#partial-functions","title":"Partial functions","text":""},{"location":"scala/advanced/notes2/#functions-extending-a-b","title":"Functions extending <code>(A =&gt; B)</code>","text":"<p>Wiele kolekcji rozszerza <code>(A =&gt; B)</code>, czyli dziedziczy po <code>Function1[A, B]</code>. Mo\u017cna tworzy\u0107 w\u0142asne klasy, kt\u00f3re te\u017c to robi\u0105. Oznacza to, \u017ce instancje tej klasy mog\u0105 by\u0107 traktowane jak funkcje, tzn. mog\u0105 by\u0107 wywo\u0142ywane jak <code>object(argument)</code>. Przyk\u0142adowo:</p> <pre><code>// In this case, overridden method apply, returns boolean, if an element belongs to set:\nval aSet = Set(1,2,3,4)\naSet(1) // returns true \naSet(9) // returns false \n</code></pre> <pre><code>class Person(val name: String, val age: Int) extends (() =&gt; String) {\n    override def apply() =\n        if age &gt;= 18 then \"allowed to drink\"\n        else \"not allowed to drink\"\n}\n\nval person = new Person(\"Tom\", 15)\nperson() // returns \"not allowed to drink\"\n</code></pre> <p>To nadpisanie metody <code>apply</code> okre\u015bla zachowanie obiektu podczas wywo\u0142ania. </p> <p>Mo\u017cemy w\u0142a\u015bciwie dziedziczy\u0107 po funkcji o dowolnej krotno\u015bci argument\u00f3w. </p>"},{"location":"scala/advanced/notes3/","title":"PAF","text":""},{"location":"scala/advanced/notes3/#partially-applied-functions","title":"Partially Applied Functions","text":"<p><code>Currying</code> to technika przekszta\u0142cania funkcji przyjmuj\u0105cej wiele argument\u00f3w w sekwencj\u0119 rodzin funkcji, z kt\u00f3rych ka\u017cda przyjmuje jeden argument.</p> Dwa przyk\u0142ady rozwijania funkcji<pre><code>def concat(a: String, b: String, c: String): String = a + b + c\n\nval `concat-b-paf`: String =&gt; String =&gt; String = \n    a =&gt; c =&gt; concat(a, \"here\", c)\nval `concat-b-paf2` = \n    concat(_: String, \"here\", _: String)\n</code></pre>"},{"location":"scala/advanced/notes4/","title":"Lazy evaluation","text":""},{"location":"scala/advanced/notes4/#lazy-evaluation","title":"Lazy evaluation","text":"<pre><code>lazy val age = {\n    println(\"Computing age...\")\n    42\n}\n// we won't see any output, unless we use `age` variable somewhere \n</code></pre>"},{"location":"scala/advanced/notes4/#call-by-name","title":"Call-by-name","text":"<p>Wyra\u017cenie <code>random()</code> nie jest ewaluowane - kompilator zamienia je na <code>() =&gt; random()</code>. Co wi\u0119cej, w ciele funkcji, mo\u017cemy odwo\u0142a\u0107 si\u0119 do zawarto\u015bci pisz\u0105c <code>x</code> - kompilator zamienia to na <code>x.apply()</code>, czyli <code>x()</code>. </p> <pre><code>def printTwice(x: =&gt; Int) = {\n    println(x)\n    println(x)\n}\n\ndef random(): Int = {\n    Random.nextInt(100)\n}\n\nprintTwice(random())\n// prints two different numbers\n</code></pre>"},{"location":"scala/advanced/notes4/#call-by-need","title":"Call-by-need","text":"<p>Mo\u017cemy po\u0142\u0105czy\u0107 dwa powy\u017csze podej\u015bcia i stworzy\u0107 funkcj\u0119, kt\u00f3ra przyjmuje leniwe obliczenie (ale go nie wywo\u0142uje), nastepnie tworzy leniw\u0105 zmienn\u0105 z warto\u015bci\u0105 zwracan\u0105 przez podan\u0105 funkcj\u0119. To podej\u015bcie \u0142\u0105czy wydajno\u015b\u0107 z leniwo\u015bci\u0105. </p> Leniwa ewaluacja na dwa sposoby - r\u00f3znice w wywo\u0142aniach/dost\u0119pie<pre><code>def byNeedA(n: =&gt; Int) = \n    lazy val lazyN = n // cache \n    lazyN + lazyN + 1 \n\ndef byNeedB(n: () =&gt; Int) = \n    lazy val lazyN = n()\n    lazyN + lazyN + 1 \n\nbyNeedA(getNumber())\nbyNeedB(getNumber)\n</code></pre> <p>Lek. 10-12</p>"},{"location":"scala/advanced/notes5/","title":"Monads","text":""},{"location":"scala/advanced/notes5/#monada","title":"Monada","text":"<p>Monada to abstrakcyjny typ danych. Aby co\u015b by\u0142o monad\u0105, musi spe\u0142nia\u0107 pewne w\u0142a\u015bciwo\u015bci (prawa monadyczne) i mie\u0107 okre\u015blon\u0105 struktur\u0119.</p> <p>Dla typu <code>M[A]</code>, \u017ceby by\u0142 monad\u0105, musz\u0105 istnie\u0107:</p> <ol> <li>funkcja <code>pure</code>, kt\u00f3ra opakowuje warto\u015b\u0107 w kontekst monadyczny:  <code>def pure[A](a: A): M[A]</code></li> <li>funkcja <code>flatMap</code>, kt\u00f3ra pozwala sp\u0142aszczy\u0107 sekwencj\u0119 oblicze\u0144:  <code>def flatMap[A](ma: M[A])(f: A =&gt; M[B]): M[B]</code></li> </ol> <p>Musi spe\u0142nia\u0107 te\u017c prawa monadyczne:  </p> <ol> <li>Prawo lewej to\u017csamo\u015bci <code>pure(a).flatMap(f) == f(a)</code></li> <li>Prawo prawej to\u017csamo\u015bci <code>m.flatMap(pure) == m</code></li> <li>Prawo \u0142\u0105czno\u015bci <code>m.flatMap(f).flatMap(g) == m.flatMap(x =&gt; f(x).flatMap(g))</code></li> </ol>"},{"location":"scala/advanced/notes6/","title":"Notes6","text":""},{"location":"scala/advanced/notes6/#generics-scalabook","title":"Generics, scalabook","text":""},{"location":"scala/http4s/notes1/","title":"Notes1","text":""},{"location":"scala/http4s/notes1/#http4s","title":"HTTP4s","text":""}]}